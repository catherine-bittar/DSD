// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2017 10:20:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Deal_FSM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Deal_FSM_vlg_sample_tst(
	Clock,
	Dealer_high,
	Dealer_legal,
	Dealer_total,
	Game_over,
	INIT,
	Player_high,
	Player_legal,
	Player_total,
	Request_Deal,
	reset,
	score_dealer,
	score_player,
	Stop,
	sampler_tx
);
input  Clock;
input  Dealer_high;
input  Dealer_legal;
input [4:0] Dealer_total;
input  Game_over;
input  INIT;
input  Player_high;
input  Player_legal;
input [4:0] Player_total;
input  Request_Deal;
input  reset;
input [1:0] score_dealer;
input [1:0] score_player;
input  Stop;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or Dealer_high or Dealer_legal or Dealer_total or Game_over or INIT or Player_high or Player_legal or Player_total or Request_Deal or reset or score_dealer or score_player or Stop)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Deal_FSM_vlg_check_tst (
	Clear_count,
	Compare_enable,
	count_dealer,
	count_gd,
	count_gp,
	count_player,
	Dealer_Enable,
	Dealer_score,
	Player_Enable,
	Player_score,
	player_turn,
	rand_seed,
	sampler_rx
);
input  Clear_count;
input  Compare_enable;
input  count_dealer;
input  count_gd;
input  count_gp;
input  count_player;
input  Dealer_Enable;
input [1:0] Dealer_score;
input  Player_Enable;
input [1:0] Player_score;
input  player_turn;
input  rand_seed;
input sampler_rx;

reg  Clear_count_expected;
reg  Compare_enable_expected;
reg  count_dealer_expected;
reg  count_gd_expected;
reg  count_gp_expected;
reg  count_player_expected;
reg  Dealer_Enable_expected;
reg [1:0] Dealer_score_expected;
reg  Player_Enable_expected;
reg [1:0] Player_score_expected;
reg  player_turn_expected;
reg  rand_seed_expected;

reg  Clear_count_prev;
reg  Compare_enable_prev;
reg  count_dealer_prev;
reg  count_gd_prev;
reg  count_gp_prev;
reg  count_player_prev;
reg  Dealer_Enable_prev;
reg [1:0] Dealer_score_prev;
reg  Player_Enable_prev;
reg [1:0] Player_score_prev;
reg  player_turn_prev;
reg  rand_seed_prev;

reg  Clear_count_expected_prev;
reg  Compare_enable_expected_prev;
reg  count_dealer_expected_prev;
reg  count_gd_expected_prev;
reg  count_gp_expected_prev;
reg  count_player_expected_prev;
reg  Dealer_Enable_expected_prev;
reg  Player_Enable_expected_prev;
reg  player_turn_expected_prev;
reg  rand_seed_expected_prev;

reg  last_Clear_count_exp;
reg  last_Compare_enable_exp;
reg  last_count_dealer_exp;
reg  last_count_gd_exp;
reg  last_count_gp_exp;
reg  last_count_player_exp;
reg  last_Dealer_Enable_exp;
reg  last_Player_Enable_exp;
reg  last_player_turn_exp;
reg  last_rand_seed_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	Clear_count_prev = Clear_count;
	Compare_enable_prev = Compare_enable;
	count_dealer_prev = count_dealer;
	count_gd_prev = count_gd;
	count_gp_prev = count_gp;
	count_player_prev = count_player;
	Dealer_Enable_prev = Dealer_Enable;
	Dealer_score_prev = Dealer_score;
	Player_Enable_prev = Player_Enable;
	Player_score_prev = Player_score;
	player_turn_prev = player_turn;
	rand_seed_prev = rand_seed;
end

// update expected /o prevs

always @(trigger)
begin
	Clear_count_expected_prev = Clear_count_expected;
	Compare_enable_expected_prev = Compare_enable_expected;
	count_dealer_expected_prev = count_dealer_expected;
	count_gd_expected_prev = count_gd_expected;
	count_gp_expected_prev = count_gp_expected;
	count_player_expected_prev = count_player_expected;
	Dealer_Enable_expected_prev = Dealer_Enable_expected;
	Player_Enable_expected_prev = Player_Enable_expected;
	player_turn_expected_prev = player_turn_expected;
	rand_seed_expected_prev = rand_seed_expected;
end



// expected Clear_count
initial
begin
	Clear_count_expected = 1'bX;
end 

// expected Compare_enable
initial
begin
	Compare_enable_expected = 1'bX;
end 

// expected count_dealer
initial
begin
	count_dealer_expected = 1'bX;
end 

// expected count_gd
initial
begin
	count_gd_expected = 1'bX;
end 

// expected count_gp
initial
begin
	count_gp_expected = 1'bX;
end 

// expected Dealer_Enable
initial
begin
	Dealer_Enable_expected = 1'bX;
end 

// expected count_player
initial
begin
	count_player_expected = 1'bX;
end 

// expected Player_Enable
initial
begin
	Player_Enable_expected = 1'bX;
end 

// expected player_turn
initial
begin
	player_turn_expected = 1'bX;
end 

// expected rand_seed
initial
begin
	rand_seed_expected = 1'bX;
end 
// generate trigger
always @(Clear_count_expected or Clear_count or Compare_enable_expected or Compare_enable or count_dealer_expected or count_dealer or count_gd_expected or count_gd or count_gp_expected or count_gp or count_player_expected or count_player or Dealer_Enable_expected or Dealer_Enable or Dealer_score_expected or Dealer_score or Player_Enable_expected or Player_Enable or Player_score_expected or Player_score or player_turn_expected or player_turn or rand_seed_expected or rand_seed)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Clear_count = %b | expected Compare_enable = %b | expected count_dealer = %b | expected count_gd = %b | expected count_gp = %b | expected count_player = %b | expected Dealer_Enable = %b | expected Dealer_score = %b | expected Player_Enable = %b | expected Player_score = %b | expected player_turn = %b | expected rand_seed = %b | ",Clear_count_expected_prev,Compare_enable_expected_prev,count_dealer_expected_prev,count_gd_expected_prev,count_gp_expected_prev,count_player_expected_prev,Dealer_Enable_expected_prev,Dealer_score_expected_prev,Player_Enable_expected_prev,Player_score_expected_prev,player_turn_expected_prev,rand_seed_expected_prev);
	$display("| real Clear_count = %b | real Compare_enable = %b | real count_dealer = %b | real count_gd = %b | real count_gp = %b | real count_player = %b | real Dealer_Enable = %b | real Dealer_score = %b | real Player_Enable = %b | real Player_score = %b | real player_turn = %b | real rand_seed = %b | ",Clear_count_prev,Compare_enable_prev,count_dealer_prev,count_gd_prev,count_gp_prev,count_player_prev,Dealer_Enable_prev,Dealer_score_prev,Player_Enable_prev,Player_score_prev,player_turn_prev,rand_seed_prev);
`endif
	if (
		( Clear_count_expected_prev !== 1'bx ) && ( Clear_count_prev !== Clear_count_expected_prev )
		&& ((Clear_count_expected_prev !== last_Clear_count_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Clear_count :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Clear_count_expected_prev);
		$display ("     Real value = %b", Clear_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Clear_count_exp = Clear_count_expected_prev;
	end
	if (
		( Compare_enable_expected_prev !== 1'bx ) && ( Compare_enable_prev !== Compare_enable_expected_prev )
		&& ((Compare_enable_expected_prev !== last_Compare_enable_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Compare_enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Compare_enable_expected_prev);
		$display ("     Real value = %b", Compare_enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Compare_enable_exp = Compare_enable_expected_prev;
	end
	if (
		( count_dealer_expected_prev !== 1'bx ) && ( count_dealer_prev !== count_dealer_expected_prev )
		&& ((count_dealer_expected_prev !== last_count_dealer_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_dealer :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_dealer_expected_prev);
		$display ("     Real value = %b", count_dealer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_count_dealer_exp = count_dealer_expected_prev;
	end
	if (
		( count_gd_expected_prev !== 1'bx ) && ( count_gd_prev !== count_gd_expected_prev )
		&& ((count_gd_expected_prev !== last_count_gd_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_gd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_gd_expected_prev);
		$display ("     Real value = %b", count_gd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_gd_exp = count_gd_expected_prev;
	end
	if (
		( count_gp_expected_prev !== 1'bx ) && ( count_gp_prev !== count_gp_expected_prev )
		&& ((count_gp_expected_prev !== last_count_gp_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_gp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_gp_expected_prev);
		$display ("     Real value = %b", count_gp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_count_gp_exp = count_gp_expected_prev;
	end
	if (
		( count_player_expected_prev !== 1'bx ) && ( count_player_prev !== count_player_expected_prev )
		&& ((count_player_expected_prev !== last_count_player_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_player :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_player_expected_prev);
		$display ("     Real value = %b", count_player_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_count_player_exp = count_player_expected_prev;
	end
	if (
		( Dealer_Enable_expected_prev !== 1'bx ) && ( Dealer_Enable_prev !== Dealer_Enable_expected_prev )
		&& ((Dealer_Enable_expected_prev !== last_Dealer_Enable_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dealer_Enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dealer_Enable_expected_prev);
		$display ("     Real value = %b", Dealer_Enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Dealer_Enable_exp = Dealer_Enable_expected_prev;
	end
	if (
		( Player_Enable_expected_prev !== 1'bx ) && ( Player_Enable_prev !== Player_Enable_expected_prev )
		&& ((Player_Enable_expected_prev !== last_Player_Enable_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Player_Enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Player_Enable_expected_prev);
		$display ("     Real value = %b", Player_Enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Player_Enable_exp = Player_Enable_expected_prev;
	end
	if (
		( player_turn_expected_prev !== 1'bx ) && ( player_turn_prev !== player_turn_expected_prev )
		&& ((player_turn_expected_prev !== last_player_turn_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_turn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_turn_expected_prev);
		$display ("     Real value = %b", player_turn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_player_turn_exp = player_turn_expected_prev;
	end
	if (
		( rand_seed_expected_prev !== 1'bx ) && ( rand_seed_prev !== rand_seed_expected_prev )
		&& ((rand_seed_expected_prev !== last_rand_seed_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rand_seed :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rand_seed_expected_prev);
		$display ("     Real value = %b", rand_seed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_rand_seed_exp = rand_seed_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Deal_FSM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Dealer_high;
reg Dealer_legal;
reg [4:0] Dealer_total;
reg Game_over;
reg INIT;
reg Player_high;
reg Player_legal;
reg [4:0] Player_total;
reg Request_Deal;
reg reset;
reg [1:0] score_dealer;
reg [1:0] score_player;
reg Stop;
// wires                                               
wire Clear_count;
wire Compare_enable;
wire count_dealer;
wire count_gd;
wire count_gp;
wire count_player;
wire Dealer_Enable;
wire [1:0] Dealer_score;
wire Player_Enable;
wire [1:0] Player_score;
wire player_turn;
wire rand_seed;

wire sampler;                             

// assign statements (if any)                          
Deal_FSM i1 (
// port map - connection between master ports and signals/registers   
	.Clear_count(Clear_count),
	.Clock(Clock),
	.Compare_enable(Compare_enable),
	.count_dealer(count_dealer),
	.count_gd(count_gd),
	.count_gp(count_gp),
	.count_player(count_player),
	.Dealer_Enable(Dealer_Enable),
	.Dealer_high(Dealer_high),
	.Dealer_legal(Dealer_legal),
	.Dealer_score(Dealer_score),
	.Dealer_total(Dealer_total),
	.Game_over(Game_over),
	.INIT(INIT),
	.Player_Enable(Player_Enable),
	.Player_high(Player_high),
	.Player_legal(Player_legal),
	.Player_score(Player_score),
	.Player_total(Player_total),
	.player_turn(player_turn),
	.rand_seed(rand_seed),
	.Request_Deal(Request_Deal),
	.reset(reset),
	.score_dealer(score_dealer),
	.score_player(score_player),
	.Stop(Stop)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// INIT
initial
begin
	INIT = 1'b0;
	INIT = #20000 1'b1;
	INIT = #20000 1'b0;
end 

// Request_Deal
initial
begin
	Request_Deal = 1'b0;
	Request_Deal = #70000 1'b1;
	Request_Deal = #20000 1'b0;
end 

// Stop
initial
begin
	Stop = 1'b0;
	Stop = #120000 1'b1;
	Stop = #20000 1'b0;
end 

// Player_high
initial
begin
	Player_high = 1'b0;
	Player_high = #170000 1'b1;
	Player_high = #20000 1'b0;
end 

// Dealer_high
initial
begin
	Dealer_high = 1'b0;
	Dealer_high = #210000 1'b1;
	Dealer_high = #20000 1'b0;
end 
// Dealer_total[ 4 ]
initial
begin
	Dealer_total[4] = 1'b0;
end 
// Dealer_total[ 3 ]
initial
begin
	Dealer_total[3] = 1'b0;
end 
// Dealer_total[ 2 ]
initial
begin
	Dealer_total[2] = 1'b0;
end 
// Dealer_total[ 1 ]
initial
begin
	Dealer_total[1] = 1'b0;
end 
// Dealer_total[ 0 ]
initial
begin
	Dealer_total[0] = 1'b0;
end 
// Player_total[ 4 ]
initial
begin
	Player_total[4] = 1'b0;
end 
// Player_total[ 3 ]
initial
begin
	Player_total[3] = 1'b0;
end 
// Player_total[ 2 ]
initial
begin
	Player_total[2] = 1'b0;
end 
// Player_total[ 1 ]
initial
begin
	Player_total[1] = 1'b0;
end 
// Player_total[ 0 ]
initial
begin
	Player_total[0] = 1'b0;
end 
// score_dealer[ 1 ]
initial
begin
	score_dealer[1] = 1'b0;
end 
// score_dealer[ 0 ]
initial
begin
	score_dealer[0] = 1'b0;
end 
// score_player[ 1 ]
initial
begin
	score_player[1] = 1'b0;
end 
// score_player[ 0 ]
initial
begin
	score_player[0] = 1'b0;
end 

// Game_over
initial
begin
	Game_over = 1'b0;
	Game_over = #270000 1'b1;
	Game_over = #20000 1'b0;
end 

Deal_FSM_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.Dealer_high(Dealer_high),
	.Dealer_legal(Dealer_legal),
	.Dealer_total(Dealer_total),
	.Game_over(Game_over),
	.INIT(INIT),
	.Player_high(Player_high),
	.Player_legal(Player_legal),
	.Player_total(Player_total),
	.Request_Deal(Request_Deal),
	.reset(reset),
	.score_dealer(score_dealer),
	.score_player(score_player),
	.Stop(Stop),
	.sampler_tx(sampler)
);

Deal_FSM_vlg_check_tst tb_out(
	.Clear_count(Clear_count),
	.Compare_enable(Compare_enable),
	.count_dealer(count_dealer),
	.count_gd(count_gd),
	.count_gp(count_gp),
	.count_player(count_player),
	.Dealer_Enable(Dealer_Enable),
	.Dealer_score(Dealer_score),
	.Player_Enable(Player_Enable),
	.Player_score(Player_score),
	.player_turn(player_turn),
	.rand_seed(rand_seed),
	.sampler_rx(sampler)
);
endmodule

