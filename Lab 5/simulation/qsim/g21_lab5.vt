// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2017 22:01:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g21_determine_winner
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g21_determine_winner_vlg_sample_tst(
	enable,
	total_dealer,
	total_player,
	sampler_tx
);
input  enable;
input [5:0] total_dealer;
input [5:0] total_player;
output sampler_tx;

reg sample;
time current_time;
always @(enable or total_dealer or total_player)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g21_determine_winner_vlg_check_tst (
	dealer_high,
	player_high,
	sampler_rx
);
input  dealer_high;
input  player_high;
input sampler_rx;

reg  dealer_high_expected;
reg  player_high_expected;

reg  dealer_high_prev;
reg  player_high_prev;

reg  dealer_high_expected_prev;
reg  player_high_expected_prev;

reg  last_dealer_high_exp;
reg  last_player_high_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	dealer_high_prev = dealer_high;
	player_high_prev = player_high;
end

// update expected /o prevs

always @(trigger)
begin
	dealer_high_expected_prev = dealer_high_expected;
	player_high_expected_prev = player_high_expected;
end



// expected player_high
initial
begin
	player_high_expected = 1'bX;
end 

// expected dealer_high
initial
begin
	dealer_high_expected = 1'bX;
end 
// generate trigger
always @(dealer_high_expected or dealer_high or player_high_expected or player_high)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dealer_high = %b | expected player_high = %b | ",dealer_high_expected_prev,player_high_expected_prev);
	$display("| real dealer_high = %b | real player_high = %b | ",dealer_high_prev,player_high_prev);
`endif
	if (
		( dealer_high_expected_prev !== 1'bx ) && ( dealer_high_prev !== dealer_high_expected_prev )
		&& ((dealer_high_expected_prev !== last_dealer_high_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dealer_high :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dealer_high_expected_prev);
		$display ("     Real value = %b", dealer_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dealer_high_exp = dealer_high_expected_prev;
	end
	if (
		( player_high_expected_prev !== 1'bx ) && ( player_high_prev !== player_high_expected_prev )
		&& ((player_high_expected_prev !== last_player_high_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_high :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_high_expected_prev);
		$display ("     Real value = %b", player_high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_player_high_exp = player_high_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g21_determine_winner_vlg_vec_tst();
// constants                                           
// general purpose registers
reg enable;
reg [5:0] total_dealer;
reg [5:0] total_player;
// wires                                               
wire dealer_high;
wire player_high;

wire sampler;                             

// assign statements (if any)                          
g21_determine_winner i1 (
// port map - connection between master ports and signals/registers   
	.dealer_high(dealer_high),
	.enable(enable),
	.player_high(player_high),
	.total_dealer(total_dealer),
	.total_player(total_player)
);
// total_dealer[ 5 ]
initial
begin
	total_dealer[5] = 1'b0;
end 
// total_dealer[ 4 ]
initial
begin
	total_dealer[4] = 1'b0;
	total_dealer[4] = #720000 1'b1;
end 
// total_dealer[ 3 ]
initial
begin
	total_dealer[3] = 1'b0;
	total_dealer[3] = #360000 1'b1;
	total_dealer[3] = #360000 1'b0;
end 
// total_dealer[ 2 ]
initial
begin
	repeat(2)
	begin
		total_dealer[2] = 1'b0;
		total_dealer[2] = #180000 1'b1;
		# 180000;
	end
	total_dealer[2] = 1'b0;
	total_dealer[2] = #180000 1'b1;
end 
// total_dealer[ 1 ]
initial
begin
	repeat(5)
	begin
		total_dealer[1] = 1'b0;
		total_dealer[1] = #90000 1'b1;
		# 90000;
	end
	total_dealer[1] = 1'b0;
	total_dealer[1] = #90000 1'b1;
end 
// total_dealer[ 0 ]
initial
begin
	repeat(11)
	begin
		total_dealer[0] = 1'b0;
		total_dealer[0] = #45000 1'b1;
		# 45000;
	end
	total_dealer[0] = 1'b0;
end 
// total_player[ 5 ]
initial
begin
	total_player[5] = 1'b0;
end 
// total_player[ 4 ]
initial
begin
	total_player[4] = 1'b0;
end 
// total_player[ 3 ]
initial
begin
	total_player[3] = 1'b1;
end 
// total_player[ 2 ]
initial
begin
	total_player[2] = 1'b0;
end 
// total_player[ 1 ]
initial
begin
	total_player[1] = 1'b1;
end 
// total_player[ 0 ]
initial
begin
	total_player[0] = 1'b1;
end 

// enable
initial
begin
	enable = 1'b1;
end 

g21_determine_winner_vlg_sample_tst tb_sample (
	.enable(enable),
	.total_dealer(total_dealer),
	.total_player(total_player),
	.sampler_tx(sampler)
);

g21_determine_winner_vlg_check_tst tb_out(
	.dealer_high(dealer_high),
	.player_high(player_high),
	.sampler_rx(sampler)
);
endmodule

