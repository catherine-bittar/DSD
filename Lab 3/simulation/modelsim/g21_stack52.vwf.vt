// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/30/2017 20:00:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g21_stack52
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g21_stack52_vlg_sample_tst(
	ADDR,
	CLK,
	DATA,
	ENABLE,
	MODE,
	RST,
	sampler_tx
);
input [5:0] ADDR;
input  CLK;
input [5:0] DATA;
input  ENABLE;
input [1:0] MODE;
input  RST;
output sampler_tx;

reg sample;
time current_time;
always @(ADDR or CLK or DATA or ENABLE or MODE or RST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g21_stack52_vlg_check_tst (
	EMPTY,
	en,
	FULL,
	NUM,
	sset,
	VALUE,
	sampler_rx
);
input  EMPTY;
input [51:0] en;
input  FULL;
input [5:0] NUM;
input  sset;
input [5:0] VALUE;
input sampler_rx;

reg  EMPTY_expected;
reg [51:0] en_expected;
reg  FULL_expected;
reg [5:0] NUM_expected;
reg  sset_expected;
reg [5:0] VALUE_expected;

reg  EMPTY_prev;
reg [51:0] en_prev;
reg  FULL_prev;
reg [5:0] NUM_prev;
reg  sset_prev;
reg [5:0] VALUE_prev;

reg  EMPTY_expected_prev;
reg [51:0] en_expected_prev;
reg  FULL_expected_prev;
reg [5:0] NUM_expected_prev;
reg  sset_expected_prev;
reg [5:0] VALUE_expected_prev;

reg  last_EMPTY_exp;
reg [51:0] last_en_exp;
reg  last_FULL_exp;
reg [5:0] last_NUM_exp;
reg  last_sset_exp;
reg [5:0] last_VALUE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	EMPTY_prev = EMPTY;
	en_prev = en;
	FULL_prev = FULL;
	NUM_prev = NUM;
	sset_prev = sset;
	VALUE_prev = VALUE;
end

// update expected /o prevs

always @(trigger)
begin
	EMPTY_expected_prev = EMPTY_expected;
	en_expected_prev = en_expected;
	FULL_expected_prev = FULL_expected;
	NUM_expected_prev = NUM_expected;
	sset_expected_prev = sset_expected;
	VALUE_expected_prev = VALUE_expected;
end



// expected EMPTY
initial
begin
	EMPTY_expected = 1'bX;
	EMPTY_expected = #999000 1'b0;
end 

// expected FULL
initial
begin
	FULL_expected = 1'bX;
	FULL_expected = #999000 1'b0;
end 
// expected NUM[ 5 ]
initial
begin
	NUM_expected[5] = 1'bX;
	NUM_expected[5] = #999000 1'b0;
end 
// expected NUM[ 4 ]
initial
begin
	NUM_expected[4] = 1'bX;
	NUM_expected[4] = #999000 1'b0;
end 
// expected NUM[ 3 ]
initial
begin
	NUM_expected[3] = 1'bX;
	NUM_expected[3] = #999000 1'b0;
end 
// expected NUM[ 2 ]
initial
begin
	NUM_expected[2] = 1'bX;
	NUM_expected[2] = #999000 1'b0;
end 
// expected NUM[ 1 ]
initial
begin
	NUM_expected[1] = 1'bX;
	NUM_expected[1] = #999000 1'b0;
end 
// expected NUM[ 0 ]
initial
begin
	NUM_expected[0] = 1'bX;
	NUM_expected[0] = #999000 1'b0;
end 
// expected VALUE[ 5 ]
initial
begin
	VALUE_expected[5] = 1'bX;
	VALUE_expected[5] = #999000 1'b0;
end 
// expected VALUE[ 4 ]
initial
begin
	VALUE_expected[4] = 1'bX;
	VALUE_expected[4] = #999000 1'b0;
end 
// expected VALUE[ 3 ]
initial
begin
	VALUE_expected[3] = 1'bX;
	VALUE_expected[3] = #999000 1'b0;
end 
// expected VALUE[ 2 ]
initial
begin
	VALUE_expected[2] = 1'bX;
	VALUE_expected[2] = #999000 1'b0;
end 
// expected VALUE[ 1 ]
initial
begin
	VALUE_expected[1] = 1'bX;
	VALUE_expected[1] = #999000 1'b0;
end 
// expected VALUE[ 0 ]
initial
begin
	VALUE_expected[0] = 1'bX;
	VALUE_expected[0] = #999000 1'b0;
end 

// expected sset
initial
begin
	sset_expected = 1'bX;
end 
// expected en[ 51 ]
initial
begin
	en_expected[51] = 1'bX;
end 
// expected en[ 50 ]
initial
begin
	en_expected[50] = 1'bX;
end 
// expected en[ 49 ]
initial
begin
	en_expected[49] = 1'bX;
end 
// expected en[ 48 ]
initial
begin
	en_expected[48] = 1'bX;
end 
// expected en[ 47 ]
initial
begin
	en_expected[47] = 1'bX;
end 
// expected en[ 46 ]
initial
begin
	en_expected[46] = 1'bX;
end 
// expected en[ 45 ]
initial
begin
	en_expected[45] = 1'bX;
end 
// expected en[ 44 ]
initial
begin
	en_expected[44] = 1'bX;
end 
// expected en[ 43 ]
initial
begin
	en_expected[43] = 1'bX;
end 
// expected en[ 42 ]
initial
begin
	en_expected[42] = 1'bX;
end 
// expected en[ 41 ]
initial
begin
	en_expected[41] = 1'bX;
end 
// expected en[ 40 ]
initial
begin
	en_expected[40] = 1'bX;
end 
// expected en[ 39 ]
initial
begin
	en_expected[39] = 1'bX;
end 
// expected en[ 38 ]
initial
begin
	en_expected[38] = 1'bX;
end 
// expected en[ 37 ]
initial
begin
	en_expected[37] = 1'bX;
end 
// expected en[ 36 ]
initial
begin
	en_expected[36] = 1'bX;
end 
// expected en[ 35 ]
initial
begin
	en_expected[35] = 1'bX;
end 
// expected en[ 34 ]
initial
begin
	en_expected[34] = 1'bX;
end 
// expected en[ 33 ]
initial
begin
	en_expected[33] = 1'bX;
end 
// expected en[ 32 ]
initial
begin
	en_expected[32] = 1'bX;
end 
// expected en[ 31 ]
initial
begin
	en_expected[31] = 1'bX;
end 
// expected en[ 30 ]
initial
begin
	en_expected[30] = 1'bX;
end 
// expected en[ 29 ]
initial
begin
	en_expected[29] = 1'bX;
end 
// expected en[ 28 ]
initial
begin
	en_expected[28] = 1'bX;
end 
// expected en[ 27 ]
initial
begin
	en_expected[27] = 1'bX;
end 
// expected en[ 26 ]
initial
begin
	en_expected[26] = 1'bX;
end 
// expected en[ 25 ]
initial
begin
	en_expected[25] = 1'bX;
end 
// expected en[ 24 ]
initial
begin
	en_expected[24] = 1'bX;
end 
// expected en[ 23 ]
initial
begin
	en_expected[23] = 1'bX;
end 
// expected en[ 22 ]
initial
begin
	en_expected[22] = 1'bX;
end 
// expected en[ 21 ]
initial
begin
	en_expected[21] = 1'bX;
end 
// expected en[ 20 ]
initial
begin
	en_expected[20] = 1'bX;
end 
// expected en[ 19 ]
initial
begin
	en_expected[19] = 1'bX;
end 
// expected en[ 18 ]
initial
begin
	en_expected[18] = 1'bX;
end 
// expected en[ 17 ]
initial
begin
	en_expected[17] = 1'bX;
end 
// expected en[ 16 ]
initial
begin
	en_expected[16] = 1'bX;
end 
// expected en[ 15 ]
initial
begin
	en_expected[15] = 1'bX;
end 
// expected en[ 14 ]
initial
begin
	en_expected[14] = 1'bX;
end 
// expected en[ 13 ]
initial
begin
	en_expected[13] = 1'bX;
end 
// expected en[ 12 ]
initial
begin
	en_expected[12] = 1'bX;
end 
// expected en[ 11 ]
initial
begin
	en_expected[11] = 1'bX;
end 
// expected en[ 10 ]
initial
begin
	en_expected[10] = 1'bX;
end 
// expected en[ 9 ]
initial
begin
	en_expected[9] = 1'bX;
end 
// expected en[ 8 ]
initial
begin
	en_expected[8] = 1'bX;
end 
// expected en[ 7 ]
initial
begin
	en_expected[7] = 1'bX;
end 
// expected en[ 6 ]
initial
begin
	en_expected[6] = 1'bX;
end 
// expected en[ 5 ]
initial
begin
	en_expected[5] = 1'bX;
end 
// expected en[ 4 ]
initial
begin
	en_expected[4] = 1'bX;
end 
// expected en[ 3 ]
initial
begin
	en_expected[3] = 1'bX;
end 
// expected en[ 2 ]
initial
begin
	en_expected[2] = 1'bX;
end 
// expected en[ 1 ]
initial
begin
	en_expected[1] = 1'bX;
end 
// expected en[ 0 ]
initial
begin
	en_expected[0] = 1'bX;
end 
// generate trigger
always @(EMPTY_expected or EMPTY or en_expected or en or FULL_expected or FULL or NUM_expected or NUM or sset_expected or sset or VALUE_expected or VALUE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected EMPTY = %b | expected en = %b | expected FULL = %b | expected NUM = %b | expected sset = %b | expected VALUE = %b | ",EMPTY_expected_prev,en_expected_prev,FULL_expected_prev,NUM_expected_prev,sset_expected_prev,VALUE_expected_prev);
	$display("| real EMPTY = %b | real en = %b | real FULL = %b | real NUM = %b | real sset = %b | real VALUE = %b | ",EMPTY_prev,en_prev,FULL_prev,NUM_prev,sset_prev,VALUE_prev);
`endif
	if (
		( EMPTY_expected_prev !== 1'bx ) && ( EMPTY_prev !== EMPTY_expected_prev )
		&& ((EMPTY_expected_prev !== last_EMPTY_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EMPTY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EMPTY_expected_prev);
		$display ("     Real value = %b", EMPTY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_EMPTY_exp = EMPTY_expected_prev;
	end
	if (
		( en_expected_prev[0] !== 1'bx ) && ( en_prev[0] !== en_expected_prev[0] )
		&& ((en_expected_prev[0] !== last_en_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[0] = en_expected_prev[0];
	end
	if (
		( en_expected_prev[1] !== 1'bx ) && ( en_prev[1] !== en_expected_prev[1] )
		&& ((en_expected_prev[1] !== last_en_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[1] = en_expected_prev[1];
	end
	if (
		( en_expected_prev[2] !== 1'bx ) && ( en_prev[2] !== en_expected_prev[2] )
		&& ((en_expected_prev[2] !== last_en_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[2] = en_expected_prev[2];
	end
	if (
		( en_expected_prev[3] !== 1'bx ) && ( en_prev[3] !== en_expected_prev[3] )
		&& ((en_expected_prev[3] !== last_en_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[3] = en_expected_prev[3];
	end
	if (
		( en_expected_prev[4] !== 1'bx ) && ( en_prev[4] !== en_expected_prev[4] )
		&& ((en_expected_prev[4] !== last_en_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[4] = en_expected_prev[4];
	end
	if (
		( en_expected_prev[5] !== 1'bx ) && ( en_prev[5] !== en_expected_prev[5] )
		&& ((en_expected_prev[5] !== last_en_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[5] = en_expected_prev[5];
	end
	if (
		( en_expected_prev[6] !== 1'bx ) && ( en_prev[6] !== en_expected_prev[6] )
		&& ((en_expected_prev[6] !== last_en_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[6] = en_expected_prev[6];
	end
	if (
		( en_expected_prev[7] !== 1'bx ) && ( en_prev[7] !== en_expected_prev[7] )
		&& ((en_expected_prev[7] !== last_en_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[7] = en_expected_prev[7];
	end
	if (
		( en_expected_prev[8] !== 1'bx ) && ( en_prev[8] !== en_expected_prev[8] )
		&& ((en_expected_prev[8] !== last_en_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[8] = en_expected_prev[8];
	end
	if (
		( en_expected_prev[9] !== 1'bx ) && ( en_prev[9] !== en_expected_prev[9] )
		&& ((en_expected_prev[9] !== last_en_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[9] = en_expected_prev[9];
	end
	if (
		( en_expected_prev[10] !== 1'bx ) && ( en_prev[10] !== en_expected_prev[10] )
		&& ((en_expected_prev[10] !== last_en_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[10] = en_expected_prev[10];
	end
	if (
		( en_expected_prev[11] !== 1'bx ) && ( en_prev[11] !== en_expected_prev[11] )
		&& ((en_expected_prev[11] !== last_en_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[11] = en_expected_prev[11];
	end
	if (
		( en_expected_prev[12] !== 1'bx ) && ( en_prev[12] !== en_expected_prev[12] )
		&& ((en_expected_prev[12] !== last_en_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[12] = en_expected_prev[12];
	end
	if (
		( en_expected_prev[13] !== 1'bx ) && ( en_prev[13] !== en_expected_prev[13] )
		&& ((en_expected_prev[13] !== last_en_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[13] = en_expected_prev[13];
	end
	if (
		( en_expected_prev[14] !== 1'bx ) && ( en_prev[14] !== en_expected_prev[14] )
		&& ((en_expected_prev[14] !== last_en_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[14] = en_expected_prev[14];
	end
	if (
		( en_expected_prev[15] !== 1'bx ) && ( en_prev[15] !== en_expected_prev[15] )
		&& ((en_expected_prev[15] !== last_en_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[15] = en_expected_prev[15];
	end
	if (
		( en_expected_prev[16] !== 1'bx ) && ( en_prev[16] !== en_expected_prev[16] )
		&& ((en_expected_prev[16] !== last_en_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[16] = en_expected_prev[16];
	end
	if (
		( en_expected_prev[17] !== 1'bx ) && ( en_prev[17] !== en_expected_prev[17] )
		&& ((en_expected_prev[17] !== last_en_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[17] = en_expected_prev[17];
	end
	if (
		( en_expected_prev[18] !== 1'bx ) && ( en_prev[18] !== en_expected_prev[18] )
		&& ((en_expected_prev[18] !== last_en_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[18] = en_expected_prev[18];
	end
	if (
		( en_expected_prev[19] !== 1'bx ) && ( en_prev[19] !== en_expected_prev[19] )
		&& ((en_expected_prev[19] !== last_en_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[19] = en_expected_prev[19];
	end
	if (
		( en_expected_prev[20] !== 1'bx ) && ( en_prev[20] !== en_expected_prev[20] )
		&& ((en_expected_prev[20] !== last_en_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[20] = en_expected_prev[20];
	end
	if (
		( en_expected_prev[21] !== 1'bx ) && ( en_prev[21] !== en_expected_prev[21] )
		&& ((en_expected_prev[21] !== last_en_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[21] = en_expected_prev[21];
	end
	if (
		( en_expected_prev[22] !== 1'bx ) && ( en_prev[22] !== en_expected_prev[22] )
		&& ((en_expected_prev[22] !== last_en_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[22] = en_expected_prev[22];
	end
	if (
		( en_expected_prev[23] !== 1'bx ) && ( en_prev[23] !== en_expected_prev[23] )
		&& ((en_expected_prev[23] !== last_en_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[23] = en_expected_prev[23];
	end
	if (
		( en_expected_prev[24] !== 1'bx ) && ( en_prev[24] !== en_expected_prev[24] )
		&& ((en_expected_prev[24] !== last_en_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[24] = en_expected_prev[24];
	end
	if (
		( en_expected_prev[25] !== 1'bx ) && ( en_prev[25] !== en_expected_prev[25] )
		&& ((en_expected_prev[25] !== last_en_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[25] = en_expected_prev[25];
	end
	if (
		( en_expected_prev[26] !== 1'bx ) && ( en_prev[26] !== en_expected_prev[26] )
		&& ((en_expected_prev[26] !== last_en_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[26] = en_expected_prev[26];
	end
	if (
		( en_expected_prev[27] !== 1'bx ) && ( en_prev[27] !== en_expected_prev[27] )
		&& ((en_expected_prev[27] !== last_en_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[27] = en_expected_prev[27];
	end
	if (
		( en_expected_prev[28] !== 1'bx ) && ( en_prev[28] !== en_expected_prev[28] )
		&& ((en_expected_prev[28] !== last_en_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[28] = en_expected_prev[28];
	end
	if (
		( en_expected_prev[29] !== 1'bx ) && ( en_prev[29] !== en_expected_prev[29] )
		&& ((en_expected_prev[29] !== last_en_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[29] = en_expected_prev[29];
	end
	if (
		( en_expected_prev[30] !== 1'bx ) && ( en_prev[30] !== en_expected_prev[30] )
		&& ((en_expected_prev[30] !== last_en_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[30] = en_expected_prev[30];
	end
	if (
		( en_expected_prev[31] !== 1'bx ) && ( en_prev[31] !== en_expected_prev[31] )
		&& ((en_expected_prev[31] !== last_en_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[31] = en_expected_prev[31];
	end
	if (
		( en_expected_prev[32] !== 1'bx ) && ( en_prev[32] !== en_expected_prev[32] )
		&& ((en_expected_prev[32] !== last_en_exp[32]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[32] = en_expected_prev[32];
	end
	if (
		( en_expected_prev[33] !== 1'bx ) && ( en_prev[33] !== en_expected_prev[33] )
		&& ((en_expected_prev[33] !== last_en_exp[33]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[33] = en_expected_prev[33];
	end
	if (
		( en_expected_prev[34] !== 1'bx ) && ( en_prev[34] !== en_expected_prev[34] )
		&& ((en_expected_prev[34] !== last_en_exp[34]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[34] = en_expected_prev[34];
	end
	if (
		( en_expected_prev[35] !== 1'bx ) && ( en_prev[35] !== en_expected_prev[35] )
		&& ((en_expected_prev[35] !== last_en_exp[35]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[35] = en_expected_prev[35];
	end
	if (
		( en_expected_prev[36] !== 1'bx ) && ( en_prev[36] !== en_expected_prev[36] )
		&& ((en_expected_prev[36] !== last_en_exp[36]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[36] = en_expected_prev[36];
	end
	if (
		( en_expected_prev[37] !== 1'bx ) && ( en_prev[37] !== en_expected_prev[37] )
		&& ((en_expected_prev[37] !== last_en_exp[37]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[37] = en_expected_prev[37];
	end
	if (
		( en_expected_prev[38] !== 1'bx ) && ( en_prev[38] !== en_expected_prev[38] )
		&& ((en_expected_prev[38] !== last_en_exp[38]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[38] = en_expected_prev[38];
	end
	if (
		( en_expected_prev[39] !== 1'bx ) && ( en_prev[39] !== en_expected_prev[39] )
		&& ((en_expected_prev[39] !== last_en_exp[39]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[39] = en_expected_prev[39];
	end
	if (
		( en_expected_prev[40] !== 1'bx ) && ( en_prev[40] !== en_expected_prev[40] )
		&& ((en_expected_prev[40] !== last_en_exp[40]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[40] = en_expected_prev[40];
	end
	if (
		( en_expected_prev[41] !== 1'bx ) && ( en_prev[41] !== en_expected_prev[41] )
		&& ((en_expected_prev[41] !== last_en_exp[41]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[41] = en_expected_prev[41];
	end
	if (
		( en_expected_prev[42] !== 1'bx ) && ( en_prev[42] !== en_expected_prev[42] )
		&& ((en_expected_prev[42] !== last_en_exp[42]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[42] = en_expected_prev[42];
	end
	if (
		( en_expected_prev[43] !== 1'bx ) && ( en_prev[43] !== en_expected_prev[43] )
		&& ((en_expected_prev[43] !== last_en_exp[43]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[43] = en_expected_prev[43];
	end
	if (
		( en_expected_prev[44] !== 1'bx ) && ( en_prev[44] !== en_expected_prev[44] )
		&& ((en_expected_prev[44] !== last_en_exp[44]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[44] = en_expected_prev[44];
	end
	if (
		( en_expected_prev[45] !== 1'bx ) && ( en_prev[45] !== en_expected_prev[45] )
		&& ((en_expected_prev[45] !== last_en_exp[45]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[45] = en_expected_prev[45];
	end
	if (
		( en_expected_prev[46] !== 1'bx ) && ( en_prev[46] !== en_expected_prev[46] )
		&& ((en_expected_prev[46] !== last_en_exp[46]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[46] = en_expected_prev[46];
	end
	if (
		( en_expected_prev[47] !== 1'bx ) && ( en_prev[47] !== en_expected_prev[47] )
		&& ((en_expected_prev[47] !== last_en_exp[47]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[47] = en_expected_prev[47];
	end
	if (
		( en_expected_prev[48] !== 1'bx ) && ( en_prev[48] !== en_expected_prev[48] )
		&& ((en_expected_prev[48] !== last_en_exp[48]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[48] = en_expected_prev[48];
	end
	if (
		( en_expected_prev[49] !== 1'bx ) && ( en_prev[49] !== en_expected_prev[49] )
		&& ((en_expected_prev[49] !== last_en_exp[49]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[49] = en_expected_prev[49];
	end
	if (
		( en_expected_prev[50] !== 1'bx ) && ( en_prev[50] !== en_expected_prev[50] )
		&& ((en_expected_prev[50] !== last_en_exp[50]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[50] = en_expected_prev[50];
	end
	if (
		( en_expected_prev[51] !== 1'bx ) && ( en_prev[51] !== en_expected_prev[51] )
		&& ((en_expected_prev[51] !== last_en_exp[51]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_en_exp[51] = en_expected_prev[51];
	end
	if (
		( FULL_expected_prev !== 1'bx ) && ( FULL_prev !== FULL_expected_prev )
		&& ((FULL_expected_prev !== last_FULL_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FULL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FULL_expected_prev);
		$display ("     Real value = %b", FULL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FULL_exp = FULL_expected_prev;
	end
	if (
		( NUM_expected_prev[0] !== 1'bx ) && ( NUM_prev[0] !== NUM_expected_prev[0] )
		&& ((NUM_expected_prev[0] !== last_NUM_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[0] = NUM_expected_prev[0];
	end
	if (
		( NUM_expected_prev[1] !== 1'bx ) && ( NUM_prev[1] !== NUM_expected_prev[1] )
		&& ((NUM_expected_prev[1] !== last_NUM_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[1] = NUM_expected_prev[1];
	end
	if (
		( NUM_expected_prev[2] !== 1'bx ) && ( NUM_prev[2] !== NUM_expected_prev[2] )
		&& ((NUM_expected_prev[2] !== last_NUM_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[2] = NUM_expected_prev[2];
	end
	if (
		( NUM_expected_prev[3] !== 1'bx ) && ( NUM_prev[3] !== NUM_expected_prev[3] )
		&& ((NUM_expected_prev[3] !== last_NUM_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[3] = NUM_expected_prev[3];
	end
	if (
		( NUM_expected_prev[4] !== 1'bx ) && ( NUM_prev[4] !== NUM_expected_prev[4] )
		&& ((NUM_expected_prev[4] !== last_NUM_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[4] = NUM_expected_prev[4];
	end
	if (
		( NUM_expected_prev[5] !== 1'bx ) && ( NUM_prev[5] !== NUM_expected_prev[5] )
		&& ((NUM_expected_prev[5] !== last_NUM_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[5] = NUM_expected_prev[5];
	end
	if (
		( sset_expected_prev !== 1'bx ) && ( sset_prev !== sset_expected_prev )
		&& ((sset_expected_prev !== last_sset_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sset :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sset_expected_prev);
		$display ("     Real value = %b", sset_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sset_exp = sset_expected_prev;
	end
	if (
		( VALUE_expected_prev[0] !== 1'bx ) && ( VALUE_prev[0] !== VALUE_expected_prev[0] )
		&& ((VALUE_expected_prev[0] !== last_VALUE_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VALUE_exp[0] = VALUE_expected_prev[0];
	end
	if (
		( VALUE_expected_prev[1] !== 1'bx ) && ( VALUE_prev[1] !== VALUE_expected_prev[1] )
		&& ((VALUE_expected_prev[1] !== last_VALUE_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VALUE_exp[1] = VALUE_expected_prev[1];
	end
	if (
		( VALUE_expected_prev[2] !== 1'bx ) && ( VALUE_prev[2] !== VALUE_expected_prev[2] )
		&& ((VALUE_expected_prev[2] !== last_VALUE_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VALUE_exp[2] = VALUE_expected_prev[2];
	end
	if (
		( VALUE_expected_prev[3] !== 1'bx ) && ( VALUE_prev[3] !== VALUE_expected_prev[3] )
		&& ((VALUE_expected_prev[3] !== last_VALUE_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VALUE_exp[3] = VALUE_expected_prev[3];
	end
	if (
		( VALUE_expected_prev[4] !== 1'bx ) && ( VALUE_prev[4] !== VALUE_expected_prev[4] )
		&& ((VALUE_expected_prev[4] !== last_VALUE_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VALUE_exp[4] = VALUE_expected_prev[4];
	end
	if (
		( VALUE_expected_prev[5] !== 1'bx ) && ( VALUE_prev[5] !== VALUE_expected_prev[5] )
		&& ((VALUE_expected_prev[5] !== last_VALUE_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VALUE_exp[5] = VALUE_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g21_stack52_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] ADDR;
reg CLK;
reg [5:0] DATA;
reg ENABLE;
reg [1:0] MODE;
reg RST;
// wires                                               
wire EMPTY;
wire [51:0] en;
wire FULL;
wire [5:0] NUM;
wire sset;
wire [5:0] VALUE;

wire sampler;                             

// assign statements (if any)                          
g21_stack52 i1 (
// port map - connection between master ports and signals/registers   
	.ADDR(ADDR),
	.CLK(CLK),
	.DATA(DATA),
	.EMPTY(EMPTY),
	.en(en),
	.ENABLE(ENABLE),
	.FULL(FULL),
	.MODE(MODE),
	.NUM(NUM),
	.RST(RST),
	.sset(sset),
	.VALUE(VALUE)
);
// ADDR[ 5 ]
initial
begin
	ADDR[5] = 1'b0;
	ADDR[5] = #640000 1'b1;
	ADDR[5] = #640000 1'b0;
	ADDR[5] = #640000 1'b1;
end 
// ADDR[ 4 ]
initial
begin
	repeat(3)
	begin
		ADDR[4] = 1'b0;
		ADDR[4] = #320000 1'b1;
		# 320000;
	end
	ADDR[4] = 1'b0;
end 
// ADDR[ 3 ]
initial
begin
	repeat(6)
	begin
		ADDR[3] = 1'b0;
		ADDR[3] = #160000 1'b1;
		# 160000;
	end
	ADDR[3] = 1'b0;
end 
// ADDR[ 2 ]
initial
begin
	repeat(12)
	begin
		ADDR[2] = 1'b0;
		ADDR[2] = #80000 1'b1;
		# 80000;
	end
	ADDR[2] = 1'b0;
end 
// ADDR[ 1 ]
always
begin
	ADDR[1] = 1'b0;
	ADDR[1] = #40000 1'b1;
	#40000;
end 
// ADDR[ 0 ]
always
begin
	ADDR[0] = 1'b0;
	ADDR[0] = #20000 1'b1;
	#20000;
end 
// DATA[ 5 ]
initial
begin
	DATA[5] = 1'b0;
end 
// DATA[ 4 ]
initial
begin
	DATA[4] = 1'b0;
end 
// DATA[ 3 ]
initial
begin
	DATA[3] = 1'b1;
end 
// DATA[ 2 ]
initial
begin
	DATA[2] = 1'b1;
end 
// DATA[ 1 ]
initial
begin
	DATA[1] = 1'b1;
end 
// DATA[ 0 ]
initial
begin
	DATA[0] = 1'b1;
end 

// ENABLE
initial
begin
	ENABLE = 1'b0;
	ENABLE = #10000 1'b1;
	ENABLE = #20000 1'b0;
end 

// RST
initial
begin
	RST = 1'b0;
end 
// MODE[ 1 ]
initial
begin
	MODE[1] = 1'b0;
end 
// MODE[ 0 ]
initial
begin
	MODE[0] = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

g21_stack52_vlg_sample_tst tb_sample (
	.ADDR(ADDR),
	.CLK(CLK),
	.DATA(DATA),
	.ENABLE(ENABLE),
	.MODE(MODE),
	.RST(RST),
	.sampler_tx(sampler)
);

g21_stack52_vlg_check_tst tb_out(
	.EMPTY(EMPTY),
	.en(en),
	.FULL(FULL),
	.NUM(NUM),
	.sset(sset),
	.VALUE(VALUE),
	.sampler_rx(sampler)
);
endmodule

