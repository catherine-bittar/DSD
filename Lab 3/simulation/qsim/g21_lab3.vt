// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/28/2017 17:57:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g21_test_bed
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g21_test_bed_vlg_sample_tst(
	CLK,
	dipswitch1,
	dipswitch2,
	pushButton,
	sampler_tx
);
input  CLK;
input [1:0] dipswitch1;
input [5:0] dipswitch2;
input  pushButton;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or dipswitch1 or dipswitch2 or pushButton)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g21_test_bed_vlg_check_tst (
	enable,
	LEDfloor,
	LEDmod,
	NUM,
	VALUE,
	sampler_rx
);
input  enable;
input [6:0] LEDfloor;
input [6:0] LEDmod;
input [5:0] NUM;
input [5:0] VALUE;
input sampler_rx;

reg  enable_expected;
reg [6:0] LEDfloor_expected;
reg [6:0] LEDmod_expected;
reg [5:0] NUM_expected;
reg [5:0] VALUE_expected;

reg  enable_prev;
reg [6:0] LEDfloor_prev;
reg [6:0] LEDmod_prev;
reg [5:0] NUM_prev;
reg [5:0] VALUE_prev;

reg  enable_expected_prev;
reg [6:0] LEDfloor_expected_prev;
reg [6:0] LEDmod_expected_prev;
reg [5:0] NUM_expected_prev;
reg [5:0] VALUE_expected_prev;

reg  last_enable_exp;
reg [6:0] last_LEDfloor_exp;
reg [6:0] last_LEDmod_exp;
reg [5:0] last_NUM_exp;
reg [5:0] last_VALUE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	enable_prev = enable;
	LEDfloor_prev = LEDfloor;
	LEDmod_prev = LEDmod;
	NUM_prev = NUM;
	VALUE_prev = VALUE;
end

// update expected /o prevs

always @(trigger)
begin
	enable_expected_prev = enable_expected;
	LEDfloor_expected_prev = LEDfloor_expected;
	LEDmod_expected_prev = LEDmod_expected;
	NUM_expected_prev = NUM_expected;
	VALUE_expected_prev = VALUE_expected;
end


// expected LEDfloor[ 6 ]
initial
begin
	LEDfloor_expected[6] = 1'bX;
	LEDfloor_expected[6] = #999000 1'b0;
end 
// expected LEDfloor[ 5 ]
initial
begin
	LEDfloor_expected[5] = 1'bX;
	LEDfloor_expected[5] = #999000 1'b0;
end 
// expected LEDfloor[ 4 ]
initial
begin
	LEDfloor_expected[4] = 1'bX;
	LEDfloor_expected[4] = #999000 1'b0;
end 
// expected LEDfloor[ 3 ]
initial
begin
	LEDfloor_expected[3] = 1'bX;
	LEDfloor_expected[3] = #999000 1'b0;
end 
// expected LEDfloor[ 2 ]
initial
begin
	LEDfloor_expected[2] = 1'bX;
	LEDfloor_expected[2] = #999000 1'b0;
end 
// expected LEDfloor[ 1 ]
initial
begin
	LEDfloor_expected[1] = 1'bX;
	LEDfloor_expected[1] = #999000 1'b0;
end 
// expected LEDfloor[ 0 ]
initial
begin
	LEDfloor_expected[0] = 1'bX;
	LEDfloor_expected[0] = #999000 1'b0;
end 
// expected LEDmod[ 6 ]
initial
begin
	LEDmod_expected[6] = 1'bX;
	LEDmod_expected[6] = #999000 1'b0;
end 
// expected LEDmod[ 5 ]
initial
begin
	LEDmod_expected[5] = 1'bX;
	LEDmod_expected[5] = #999000 1'b0;
end 
// expected LEDmod[ 4 ]
initial
begin
	LEDmod_expected[4] = 1'bX;
	LEDmod_expected[4] = #999000 1'b0;
end 
// expected LEDmod[ 3 ]
initial
begin
	LEDmod_expected[3] = 1'bX;
	LEDmod_expected[3] = #999000 1'b0;
end 
// expected LEDmod[ 2 ]
initial
begin
	LEDmod_expected[2] = 1'bX;
	LEDmod_expected[2] = #999000 1'b0;
end 
// expected LEDmod[ 1 ]
initial
begin
	LEDmod_expected[1] = 1'bX;
	LEDmod_expected[1] = #999000 1'b0;
end 
// expected LEDmod[ 0 ]
initial
begin
	LEDmod_expected[0] = 1'bX;
	LEDmod_expected[0] = #999000 1'b0;
end 
// expected VALUE[ 5 ]
initial
begin
	VALUE_expected[5] = 1'bX;
end 
// expected VALUE[ 4 ]
initial
begin
	VALUE_expected[4] = 1'bX;
end 
// expected VALUE[ 3 ]
initial
begin
	VALUE_expected[3] = 1'bX;
end 
// expected VALUE[ 2 ]
initial
begin
	VALUE_expected[2] = 1'bX;
end 
// expected VALUE[ 1 ]
initial
begin
	VALUE_expected[1] = 1'bX;
end 
// expected VALUE[ 0 ]
initial
begin
	VALUE_expected[0] = 1'bX;
end 

// expected enable
initial
begin
	enable_expected = 1'bX;
end 
// expected NUM[ 5 ]
initial
begin
	NUM_expected[5] = 1'bX;
end 
// expected NUM[ 4 ]
initial
begin
	NUM_expected[4] = 1'bX;
end 
// expected NUM[ 3 ]
initial
begin
	NUM_expected[3] = 1'bX;
end 
// expected NUM[ 2 ]
initial
begin
	NUM_expected[2] = 1'bX;
end 
// expected NUM[ 1 ]
initial
begin
	NUM_expected[1] = 1'bX;
end 
// expected NUM[ 0 ]
initial
begin
	NUM_expected[0] = 1'bX;
end 
// generate trigger
always @(enable_expected or enable or LEDfloor_expected or LEDfloor or LEDmod_expected or LEDmod or NUM_expected or NUM or VALUE_expected or VALUE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected enable = %b | expected LEDfloor = %b | expected LEDmod = %b | expected NUM = %b | expected VALUE = %b | ",enable_expected_prev,LEDfloor_expected_prev,LEDmod_expected_prev,NUM_expected_prev,VALUE_expected_prev);
	$display("| real enable = %b | real LEDfloor = %b | real LEDmod = %b | real NUM = %b | real VALUE = %b | ",enable_prev,LEDfloor_prev,LEDmod_prev,NUM_prev,VALUE_prev);
`endif
	if (
		( enable_expected_prev !== 1'bx ) && ( enable_prev !== enable_expected_prev )
		&& ((enable_expected_prev !== last_enable_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_expected_prev);
		$display ("     Real value = %b", enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_enable_exp = enable_expected_prev;
	end
	if (
		( LEDfloor_expected_prev[0] !== 1'bx ) && ( LEDfloor_prev[0] !== LEDfloor_expected_prev[0] )
		&& ((LEDfloor_expected_prev[0] !== last_LEDfloor_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDfloor[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDfloor_expected_prev);
		$display ("     Real value = %b", LEDfloor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDfloor_exp[0] = LEDfloor_expected_prev[0];
	end
	if (
		( LEDfloor_expected_prev[1] !== 1'bx ) && ( LEDfloor_prev[1] !== LEDfloor_expected_prev[1] )
		&& ((LEDfloor_expected_prev[1] !== last_LEDfloor_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDfloor[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDfloor_expected_prev);
		$display ("     Real value = %b", LEDfloor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDfloor_exp[1] = LEDfloor_expected_prev[1];
	end
	if (
		( LEDfloor_expected_prev[2] !== 1'bx ) && ( LEDfloor_prev[2] !== LEDfloor_expected_prev[2] )
		&& ((LEDfloor_expected_prev[2] !== last_LEDfloor_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDfloor[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDfloor_expected_prev);
		$display ("     Real value = %b", LEDfloor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDfloor_exp[2] = LEDfloor_expected_prev[2];
	end
	if (
		( LEDfloor_expected_prev[3] !== 1'bx ) && ( LEDfloor_prev[3] !== LEDfloor_expected_prev[3] )
		&& ((LEDfloor_expected_prev[3] !== last_LEDfloor_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDfloor[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDfloor_expected_prev);
		$display ("     Real value = %b", LEDfloor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDfloor_exp[3] = LEDfloor_expected_prev[3];
	end
	if (
		( LEDfloor_expected_prev[4] !== 1'bx ) && ( LEDfloor_prev[4] !== LEDfloor_expected_prev[4] )
		&& ((LEDfloor_expected_prev[4] !== last_LEDfloor_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDfloor[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDfloor_expected_prev);
		$display ("     Real value = %b", LEDfloor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDfloor_exp[4] = LEDfloor_expected_prev[4];
	end
	if (
		( LEDfloor_expected_prev[5] !== 1'bx ) && ( LEDfloor_prev[5] !== LEDfloor_expected_prev[5] )
		&& ((LEDfloor_expected_prev[5] !== last_LEDfloor_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDfloor[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDfloor_expected_prev);
		$display ("     Real value = %b", LEDfloor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDfloor_exp[5] = LEDfloor_expected_prev[5];
	end
	if (
		( LEDfloor_expected_prev[6] !== 1'bx ) && ( LEDfloor_prev[6] !== LEDfloor_expected_prev[6] )
		&& ((LEDfloor_expected_prev[6] !== last_LEDfloor_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDfloor[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDfloor_expected_prev);
		$display ("     Real value = %b", LEDfloor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDfloor_exp[6] = LEDfloor_expected_prev[6];
	end
	if (
		( LEDmod_expected_prev[0] !== 1'bx ) && ( LEDmod_prev[0] !== LEDmod_expected_prev[0] )
		&& ((LEDmod_expected_prev[0] !== last_LEDmod_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDmod[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDmod_expected_prev);
		$display ("     Real value = %b", LEDmod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDmod_exp[0] = LEDmod_expected_prev[0];
	end
	if (
		( LEDmod_expected_prev[1] !== 1'bx ) && ( LEDmod_prev[1] !== LEDmod_expected_prev[1] )
		&& ((LEDmod_expected_prev[1] !== last_LEDmod_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDmod[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDmod_expected_prev);
		$display ("     Real value = %b", LEDmod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDmod_exp[1] = LEDmod_expected_prev[1];
	end
	if (
		( LEDmod_expected_prev[2] !== 1'bx ) && ( LEDmod_prev[2] !== LEDmod_expected_prev[2] )
		&& ((LEDmod_expected_prev[2] !== last_LEDmod_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDmod[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDmod_expected_prev);
		$display ("     Real value = %b", LEDmod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDmod_exp[2] = LEDmod_expected_prev[2];
	end
	if (
		( LEDmod_expected_prev[3] !== 1'bx ) && ( LEDmod_prev[3] !== LEDmod_expected_prev[3] )
		&& ((LEDmod_expected_prev[3] !== last_LEDmod_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDmod[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDmod_expected_prev);
		$display ("     Real value = %b", LEDmod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDmod_exp[3] = LEDmod_expected_prev[3];
	end
	if (
		( LEDmod_expected_prev[4] !== 1'bx ) && ( LEDmod_prev[4] !== LEDmod_expected_prev[4] )
		&& ((LEDmod_expected_prev[4] !== last_LEDmod_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDmod[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDmod_expected_prev);
		$display ("     Real value = %b", LEDmod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDmod_exp[4] = LEDmod_expected_prev[4];
	end
	if (
		( LEDmod_expected_prev[5] !== 1'bx ) && ( LEDmod_prev[5] !== LEDmod_expected_prev[5] )
		&& ((LEDmod_expected_prev[5] !== last_LEDmod_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDmod[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDmod_expected_prev);
		$display ("     Real value = %b", LEDmod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDmod_exp[5] = LEDmod_expected_prev[5];
	end
	if (
		( LEDmod_expected_prev[6] !== 1'bx ) && ( LEDmod_prev[6] !== LEDmod_expected_prev[6] )
		&& ((LEDmod_expected_prev[6] !== last_LEDmod_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDmod[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDmod_expected_prev);
		$display ("     Real value = %b", LEDmod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDmod_exp[6] = LEDmod_expected_prev[6];
	end
	if (
		( NUM_expected_prev[0] !== 1'bx ) && ( NUM_prev[0] !== NUM_expected_prev[0] )
		&& ((NUM_expected_prev[0] !== last_NUM_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[0] = NUM_expected_prev[0];
	end
	if (
		( NUM_expected_prev[1] !== 1'bx ) && ( NUM_prev[1] !== NUM_expected_prev[1] )
		&& ((NUM_expected_prev[1] !== last_NUM_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[1] = NUM_expected_prev[1];
	end
	if (
		( NUM_expected_prev[2] !== 1'bx ) && ( NUM_prev[2] !== NUM_expected_prev[2] )
		&& ((NUM_expected_prev[2] !== last_NUM_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[2] = NUM_expected_prev[2];
	end
	if (
		( NUM_expected_prev[3] !== 1'bx ) && ( NUM_prev[3] !== NUM_expected_prev[3] )
		&& ((NUM_expected_prev[3] !== last_NUM_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[3] = NUM_expected_prev[3];
	end
	if (
		( NUM_expected_prev[4] !== 1'bx ) && ( NUM_prev[4] !== NUM_expected_prev[4] )
		&& ((NUM_expected_prev[4] !== last_NUM_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[4] = NUM_expected_prev[4];
	end
	if (
		( NUM_expected_prev[5] !== 1'bx ) && ( NUM_prev[5] !== NUM_expected_prev[5] )
		&& ((NUM_expected_prev[5] !== last_NUM_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NUM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NUM_expected_prev);
		$display ("     Real value = %b", NUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NUM_exp[5] = NUM_expected_prev[5];
	end
	if (
		( VALUE_expected_prev[0] !== 1'bx ) && ( VALUE_prev[0] !== VALUE_expected_prev[0] )
		&& ((VALUE_expected_prev[0] !== last_VALUE_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VALUE_exp[0] = VALUE_expected_prev[0];
	end
	if (
		( VALUE_expected_prev[1] !== 1'bx ) && ( VALUE_prev[1] !== VALUE_expected_prev[1] )
		&& ((VALUE_expected_prev[1] !== last_VALUE_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VALUE_exp[1] = VALUE_expected_prev[1];
	end
	if (
		( VALUE_expected_prev[2] !== 1'bx ) && ( VALUE_prev[2] !== VALUE_expected_prev[2] )
		&& ((VALUE_expected_prev[2] !== last_VALUE_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VALUE_exp[2] = VALUE_expected_prev[2];
	end
	if (
		( VALUE_expected_prev[3] !== 1'bx ) && ( VALUE_prev[3] !== VALUE_expected_prev[3] )
		&& ((VALUE_expected_prev[3] !== last_VALUE_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VALUE_exp[3] = VALUE_expected_prev[3];
	end
	if (
		( VALUE_expected_prev[4] !== 1'bx ) && ( VALUE_prev[4] !== VALUE_expected_prev[4] )
		&& ((VALUE_expected_prev[4] !== last_VALUE_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VALUE_exp[4] = VALUE_expected_prev[4];
	end
	if (
		( VALUE_expected_prev[5] !== 1'bx ) && ( VALUE_prev[5] !== VALUE_expected_prev[5] )
		&& ((VALUE_expected_prev[5] !== last_VALUE_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VALUE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VALUE_expected_prev);
		$display ("     Real value = %b", VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VALUE_exp[5] = VALUE_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g21_test_bed_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [1:0] dipswitch1;
reg [5:0] dipswitch2;
reg pushButton;
// wires                                               
wire enable;
wire [6:0] LEDfloor;
wire [6:0] LEDmod;
wire [5:0] NUM;
wire [5:0] VALUE;

wire sampler;                             

// assign statements (if any)                          
g21_test_bed i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.dipswitch1(dipswitch1),
	.dipswitch2(dipswitch2),
	.enable(enable),
	.LEDfloor(LEDfloor),
	.LEDmod(LEDmod),
	.NUM(NUM),
	.pushButton(pushButton),
	.VALUE(VALUE)
);

// pushButton
initial
begin
	pushButton = 1'b1;
	pushButton = #1000000 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// dipswitch1[ 1 ]
initial
begin
	dipswitch1[1] = 1'b1;
end 
// dipswitch1[ 0 ]
initial
begin
	dipswitch1[0] = 1'b1;
end 
// dipswitch2[ 5 ]
initial
begin
	dipswitch2[5] = 1'b0;
end 
// dipswitch2[ 4 ]
initial
begin
	dipswitch2[4] = 1'b0;
end 
// dipswitch2[ 3 ]
initial
begin
	dipswitch2[3] = 1'b0;
end 
// dipswitch2[ 2 ]
initial
begin
	dipswitch2[2] = 1'b0;
end 
// dipswitch2[ 1 ]
initial
begin
	dipswitch2[1] = 1'b0;
end 
// dipswitch2[ 0 ]
initial
begin
	dipswitch2[0] = 1'b0;
end 

g21_test_bed_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.dipswitch1(dipswitch1),
	.dipswitch2(dipswitch2),
	.pushButton(pushButton),
	.sampler_tx(sampler)
);

g21_test_bed_vlg_check_tst tb_out(
	.enable(enable),
	.LEDfloor(LEDfloor),
	.LEDmod(LEDmod),
	.NUM(NUM),
	.VALUE(VALUE),
	.sampler_rx(sampler)
);
endmodule

