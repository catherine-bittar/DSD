/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 0.0;
	GRID_DUTY_CYCLE = 50;
}




SIGNAL("card_to_add")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("card_to_add[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "card_to_add";
}

SIGNAL("card_to_add[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "card_to_add";
}

SIGNAL("card_to_add[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "card_to_add";
}

SIGNAL("card_to_add[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "card_to_add";
}

SIGNAL("card_to_add[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "card_to_add";
}

SIGNAL("card_to_add[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "card_to_add";
}

SIGNAL("current_hand")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("current_hand[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "current_hand";
}

SIGNAL("current_hand[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "current_hand";
}

SIGNAL("current_hand[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "current_hand";
}

SIGNAL("current_hand[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "current_hand";
}

SIGNAL("current_hand[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "current_hand";
}

SIGNAL("current_hand[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "current_hand";
}

SIGNAL("legal_play")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("total_value")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("total_value[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "total_value";
}

SIGNAL("total_value[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "total_value";
}

SIGNAL("total_value[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "total_value";
}

SIGNAL("total_value[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "total_value";
}

SIGNAL("total_value[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "total_value";
}

SIGNAL("total_value[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "total_value";
}

TRANSITION_LIST("card_to_add[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 320.0;
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 40.0;
	}
}
TRANSITION_LIST("card_to_add[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 160.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 160.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 160.0;
		LEVEL 0 FOR 40.0;
	}
}
TRANSITION_LIST("card_to_add[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 40.0;
	}
}
TRANSITION_LIST("card_to_add[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
	}
}
TRANSITION_LIST("card_to_add[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
	}
}
TRANSITION_LIST("card_to_add[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
	}
}
TRANSITION_LIST("current_hand[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("current_hand[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("current_hand[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}
TRANSITION_LIST("current_hand[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}
TRANSITION_LIST("current_hand[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}
TRANSITION_LIST("current_hand[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}
TRANSITION_LIST("legal_play")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 21.096;
		LEVEL 1 FOR 53.974;
		LEVEL 0 FOR 68.777;
		LEVEL 1 FOR 9.583;
		LEVEL 0 FOR 4.745;
		LEVEL 1 FOR 43.874;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 5.281;
		LEVEL 0 FOR 40.419;
		LEVEL 1 FOR 58.769;
		LEVEL 0 FOR 67.216;
		LEVEL 1 FOR 9.41;
		LEVEL 0 FOR 3.25;
		LEVEL 1 FOR 45.655;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 3.377;
		LEVEL 0 FOR 41.872;
		LEVEL 1 FOR 57.772;
		LEVEL 0 FOR 61.813;
		LEVEL 1 FOR 58.187;
		LEVEL 0 FOR 68.777;
		LEVEL 1 FOR 9.583;
		LEVEL 0 FOR 4.745;
		LEVEL 1 FOR 43.874;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 5.281;
		LEVEL 0 FOR 40.419;
		LEVEL 1 FOR 58.769;
		LEVEL 0 FOR 23.482;
	}
}
TRANSITION_LIST("total_value[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 10.642;
		LEVEL 0 FOR 989.358;
	}
}
TRANSITION_LIST("total_value[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 14.867;
		LEVEL 1 FOR 15.853;
		LEVEL 0 FOR 3.3;
		LEVEL 1 FOR 256.7;
		LEVEL 0 FOR 3.3;
		LEVEL 1 FOR 256.7;
		LEVEL 0 FOR 3.3;
		LEVEL 1 FOR 116.7;
		LEVEL 0 FOR 3.3;
		LEVEL 1 FOR 256.7;
		LEVEL 0 FOR 3.3;
		LEVEL 1 FOR 65.98;
	}
}
TRANSITION_LIST("total_value[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 19.699;
		LEVEL 0 FOR 10.395;
		LEVEL 1 FOR 3.3;
		LEVEL 0 FOR 61.32;
		LEVEL 1 FOR 47.736;
		LEVEL 0 FOR 9.583;
		LEVEL 1 FOR 4.745;
		LEVEL 0 FOR 43.874;
		LEVEL 1 FOR 4.265;
		LEVEL 0 FOR 18.477;
		LEVEL 1 FOR 7.258;
		LEVEL 0 FOR 5.281;
		LEVEL 1 FOR 40.419;
		LEVEL 0 FOR 13.742;
		LEVEL 1 FOR 3.3;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 8.353;
		LEVEL 1 FOR 3.25;
		LEVEL 0 FOR 45.655;
		LEVEL 1 FOR 4.265;
		LEVEL 0 FOR 18.477;
		LEVEL 1 FOR 7.258;
		LEVEL 0 FOR 3.377;
		LEVEL 1 FOR 41.872;
		LEVEL 0 FOR 14.193;
		LEVEL 1 FOR 3.3;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 42.092;
		LEVEL 0 FOR 14.608;
		LEVEL 1 FOR 3.3;
		LEVEL 0 FOR 61.32;
		LEVEL 1 FOR 47.736;
		LEVEL 0 FOR 9.583;
		LEVEL 1 FOR 4.745;
		LEVEL 0 FOR 43.874;
		LEVEL 1 FOR 4.265;
		LEVEL 0 FOR 18.477;
		LEVEL 1 FOR 7.258;
		LEVEL 0 FOR 5.281;
		LEVEL 1 FOR 40.419;
		LEVEL 0 FOR 13.742;
		LEVEL 1 FOR 3.3;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 6.606;
	}
}
TRANSITION_LIST("total_value[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 15.098;
		LEVEL 0 FOR 15.853;
		LEVEL 1 FOR 3.3;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 41.32;
		LEVEL 0 FOR 88.68;
		LEVEL 1 FOR 7.26;
		LEVEL 0 FOR 4.04;
		LEVEL 1 FOR 5.065;
		LEVEL 0 FOR 4.267;
		LEVEL 1 FOR 19.368;
		LEVEL 0 FOR 7.57;
		LEVEL 1 FOR 3.73;
		LEVEL 0 FOR 55.4;
		LEVEL 1 FOR 3.3;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 16.365;
		LEVEL 0 FOR 4.267;
		LEVEL 1 FOR 19.368;
		LEVEL 0 FOR 66.7;
		LEVEL 1 FOR 3.3;
		LEVEL 0 FOR 21.557;
		LEVEL 1 FOR 38.443;
		LEVEL 0 FOR 56.7;
		LEVEL 1 FOR 3.3;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 41.32;
		LEVEL 0 FOR 88.68;
		LEVEL 1 FOR 7.26;
		LEVEL 0 FOR 4.04;
		LEVEL 1 FOR 5.065;
		LEVEL 0 FOR 4.267;
		LEVEL 1 FOR 19.368;
		LEVEL 0 FOR 7.57;
		LEVEL 1 FOR 3.73;
		LEVEL 0 FOR 55.4;
		LEVEL 1 FOR 3.3;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 5.749;
	}
}
TRANSITION_LIST("total_value[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 20.186;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 23.615;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 21.32;
		LEVEL 0 FOR 68.68;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 27.267;
		LEVEL 1 FOR 4.632;
		LEVEL 0 FOR 34.486;
		LEVEL 1 FOR 23.615;
		LEVEL 0 FOR 21.448;
		LEVEL 1 FOR 18.552;
		LEVEL 0 FOR 70.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 27.267;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 34.118;
		LEVEL 1 FOR 25.172;
		LEVEL 0 FOR 18.443;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 56.385;
		LEVEL 1 FOR 23.615;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 21.32;
		LEVEL 0 FOR 68.68;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 27.267;
		LEVEL 1 FOR 4.632;
		LEVEL 0 FOR 34.486;
		LEVEL 1 FOR 23.615;
		LEVEL 0 FOR 21.448;
		LEVEL 1 FOR 18.552;
		LEVEL 0 FOR 6.199;
	}
}
TRANSITION_LIST("total_value[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 13.793;
		LEVEL 0 FOR 9.153;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 11.32;
		LEVEL 0 FOR 8.68;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 7.571;
		LEVEL 1 FOR 12.429;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 17.267;
		LEVEL 0 FOR 4.632;
		LEVEL 1 FOR 20.547;
		LEVEL 0 FOR 7.554;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 11.448;
		LEVEL 0 FOR 8.552;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 7.571;
		LEVEL 1 FOR 12.429;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 41.995;
		LEVEL 0 FOR 8.005;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 11.557;
		LEVEL 0 FOR 8.443;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 31.32;
		LEVEL 0 FOR 8.68;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 11.32;
		LEVEL 0 FOR 8.68;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 7.571;
		LEVEL 1 FOR 12.429;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 17.267;
		LEVEL 0 FOR 4.632;
		LEVEL 1 FOR 20.547;
		LEVEL 0 FOR 7.554;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 11.448;
		LEVEL 0 FOR 8.552;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 7.054;
	}
}


DISPLAY_LINE
{
	CHANNEL = "card_to_add";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4, 5, 6;
}

DISPLAY_LINE
{
	CHANNEL = "card_to_add[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "card_to_add[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "card_to_add[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "card_to_add[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "card_to_add[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "card_to_add[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "current_hand";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 0;
	CHILDREN = 8, 9, 10, 11, 12, 13;
}

DISPLAY_LINE
{
	CHANNEL = "current_hand[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "current_hand[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "current_hand[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "current_hand[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "current_hand[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "current_hand[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "legal_play";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "total_value";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
	CHILDREN = 16, 17, 18, 19, 20, 21;
}

DISPLAY_LINE
{
	CHANNEL = "total_value[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "total_value[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "total_value[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "total_value[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "total_value[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "total_value[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 15;
}
TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
