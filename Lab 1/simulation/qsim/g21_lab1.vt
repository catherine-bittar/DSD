// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/26/2017 14:20:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g21_lab1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g21_lab1_vlg_sample_tst(
	A,
	Ain,
	B,
	in_1,
	in_2,
	sampler_tx
);
input [6:0] A;
input [5:0] Ain;
input [6:0] B;
input [7:0] in_1;
input [7:0] in_2;
output sampler_tx;

reg sample;
time current_time;
always @(A or Ain or B or in_1 or in_2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g21_lab1_vlg_check_tst (
	AeqB,
	Amod13,
	Cout,
	floor,
	out,
	sampler_rx
);
input  AeqB;
input [7:0] Amod13;
input  Cout;
input [2:0] floor;
input [7:0] out;
input sampler_rx;

reg  AeqB_expected;
reg [7:0] Amod13_expected;
reg  Cout_expected;
reg [2:0] floor_expected;
reg [7:0] out_expected;

reg  AeqB_prev;
reg [7:0] Amod13_prev;
reg  Cout_prev;
reg [2:0] floor_prev;
reg [7:0] out_prev;

reg [7:0] Amod13_expected_prev;
reg [2:0] floor_expected_prev;

reg [7:0] last_Amod13_exp;
reg [2:0] last_floor_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	AeqB_prev = AeqB;
	Amod13_prev = Amod13;
	Cout_prev = Cout;
	floor_prev = floor;
	out_prev = out;
end

// update expected /o prevs

always @(trigger)
begin
	Amod13_expected_prev = Amod13_expected;
	floor_expected_prev = floor_expected;
end


// expected Amod13[ 7 ]
initial
begin
	Amod13_expected[7] = 1'bX;
	Amod13_expected[7] = #999000 1'b0;
end 
// expected Amod13[ 6 ]
initial
begin
	Amod13_expected[6] = 1'bX;
	Amod13_expected[6] = #999000 1'b0;
end 
// expected Amod13[ 5 ]
initial
begin
	Amod13_expected[5] = 1'bX;
	Amod13_expected[5] = #999000 1'b0;
end 
// expected Amod13[ 4 ]
initial
begin
	Amod13_expected[4] = 1'bX;
	Amod13_expected[4] = #999000 1'b0;
end 
// expected Amod13[ 3 ]
initial
begin
	Amod13_expected[3] = 1'bX;
	Amod13_expected[3] = #999000 1'b0;
end 
// expected Amod13[ 2 ]
initial
begin
	Amod13_expected[2] = 1'bX;
	Amod13_expected[2] = #999000 1'b0;
end 
// expected Amod13[ 1 ]
initial
begin
	Amod13_expected[1] = 1'bX;
	Amod13_expected[1] = #999000 1'b0;
end 
// expected Amod13[ 0 ]
initial
begin
	Amod13_expected[0] = 1'bX;
	Amod13_expected[0] = #999000 1'b0;
end 
// expected floor[ 2 ]
initial
begin
	floor_expected[2] = 1'bX;
end 
// expected floor[ 1 ]
initial
begin
	floor_expected[1] = 1'bX;
end 
// expected floor[ 0 ]
initial
begin
	floor_expected[0] = 1'bX;
end 
// generate trigger
always @(AeqB_expected or AeqB or Amod13_expected or Amod13 or Cout_expected or Cout or floor_expected or floor or out_expected or out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AeqB = %b | expected Amod13 = %b | expected Cout = %b | expected floor = %b | expected out = %b | ",AeqB_expected_prev,Amod13_expected_prev,Cout_expected_prev,floor_expected_prev,out_expected_prev);
	$display("| real AeqB = %b | real Amod13 = %b | real Cout = %b | real floor = %b | real out = %b | ",AeqB_prev,Amod13_prev,Cout_prev,floor_prev,out_prev);
`endif
	if (
		( Amod13_expected_prev[0] !== 1'bx ) && ( Amod13_prev[0] !== Amod13_expected_prev[0] )
		&& ((Amod13_expected_prev[0] !== last_Amod13_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Amod13[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Amod13_expected_prev);
		$display ("     Real value = %b", Amod13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Amod13_exp[0] = Amod13_expected_prev[0];
	end
	if (
		( Amod13_expected_prev[1] !== 1'bx ) && ( Amod13_prev[1] !== Amod13_expected_prev[1] )
		&& ((Amod13_expected_prev[1] !== last_Amod13_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Amod13[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Amod13_expected_prev);
		$display ("     Real value = %b", Amod13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Amod13_exp[1] = Amod13_expected_prev[1];
	end
	if (
		( Amod13_expected_prev[2] !== 1'bx ) && ( Amod13_prev[2] !== Amod13_expected_prev[2] )
		&& ((Amod13_expected_prev[2] !== last_Amod13_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Amod13[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Amod13_expected_prev);
		$display ("     Real value = %b", Amod13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Amod13_exp[2] = Amod13_expected_prev[2];
	end
	if (
		( Amod13_expected_prev[3] !== 1'bx ) && ( Amod13_prev[3] !== Amod13_expected_prev[3] )
		&& ((Amod13_expected_prev[3] !== last_Amod13_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Amod13[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Amod13_expected_prev);
		$display ("     Real value = %b", Amod13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Amod13_exp[3] = Amod13_expected_prev[3];
	end
	if (
		( Amod13_expected_prev[4] !== 1'bx ) && ( Amod13_prev[4] !== Amod13_expected_prev[4] )
		&& ((Amod13_expected_prev[4] !== last_Amod13_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Amod13[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Amod13_expected_prev);
		$display ("     Real value = %b", Amod13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Amod13_exp[4] = Amod13_expected_prev[4];
	end
	if (
		( Amod13_expected_prev[5] !== 1'bx ) && ( Amod13_prev[5] !== Amod13_expected_prev[5] )
		&& ((Amod13_expected_prev[5] !== last_Amod13_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Amod13[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Amod13_expected_prev);
		$display ("     Real value = %b", Amod13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Amod13_exp[5] = Amod13_expected_prev[5];
	end
	if (
		( Amod13_expected_prev[6] !== 1'bx ) && ( Amod13_prev[6] !== Amod13_expected_prev[6] )
		&& ((Amod13_expected_prev[6] !== last_Amod13_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Amod13[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Amod13_expected_prev);
		$display ("     Real value = %b", Amod13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Amod13_exp[6] = Amod13_expected_prev[6];
	end
	if (
		( Amod13_expected_prev[7] !== 1'bx ) && ( Amod13_prev[7] !== Amod13_expected_prev[7] )
		&& ((Amod13_expected_prev[7] !== last_Amod13_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Amod13[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Amod13_expected_prev);
		$display ("     Real value = %b", Amod13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Amod13_exp[7] = Amod13_expected_prev[7];
	end
	if (
		( floor_expected_prev[0] !== 1'bx ) && ( floor_prev[0] !== floor_expected_prev[0] )
		&& ((floor_expected_prev[0] !== last_floor_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port floor[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", floor_expected_prev);
		$display ("     Real value = %b", floor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_floor_exp[0] = floor_expected_prev[0];
	end
	if (
		( floor_expected_prev[1] !== 1'bx ) && ( floor_prev[1] !== floor_expected_prev[1] )
		&& ((floor_expected_prev[1] !== last_floor_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port floor[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", floor_expected_prev);
		$display ("     Real value = %b", floor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_floor_exp[1] = floor_expected_prev[1];
	end
	if (
		( floor_expected_prev[2] !== 1'bx ) && ( floor_prev[2] !== floor_expected_prev[2] )
		&& ((floor_expected_prev[2] !== last_floor_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port floor[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", floor_expected_prev);
		$display ("     Real value = %b", floor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_floor_exp[2] = floor_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g21_lab1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] A;
reg [5:0] Ain;
reg [6:0] B;
reg [7:0] in_1;
reg [7:0] in_2;
// wires                                               
wire AeqB;
wire [7:0] Amod13;
wire Cout;
wire [2:0] floor;
wire [7:0] out;

wire sampler;                             

// assign statements (if any)                          
g21_lab1 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AeqB(AeqB),
	.Ain(Ain),
	.Amod13(Amod13),
	.B(B),
	.Cout(Cout),
	.floor(floor),
	.in_1(in_1),
	.in_2(in_2),
	.out(out)
);
// Ain[ 5 ]
initial
begin
	Ain[5] = 1'b0;
	Ain[5] = #64000000 1'b1;
end 
// Ain[ 4 ]
initial
begin
	Ain[4] = 1'b0;
	Ain[4] = #32000000 1'b1;
	Ain[4] = #32000000 1'b0;
	Ain[4] = #32000000 1'b1;
end 
// Ain[ 3 ]
initial
begin
	repeat(3)
	begin
		Ain[3] = 1'b0;
		Ain[3] = #16000000 1'b1;
		# 16000000;
	end
	Ain[3] = 1'b0;
end 
// Ain[ 2 ]
initial
begin
	repeat(6)
	begin
		Ain[2] = 1'b0;
		Ain[2] = #8000000 1'b1;
		# 8000000;
	end
	Ain[2] = 1'b0;
end 
// Ain[ 1 ]
initial
begin
	repeat(12)
	begin
		Ain[1] = 1'b0;
		Ain[1] = #4000000 1'b1;
		# 4000000;
	end
	Ain[1] = 1'b0;
end 
// Ain[ 0 ]
always
begin
	Ain[0] = 1'b0;
	Ain[0] = #2000000 1'b1;
	#2000000;
end 

g21_lab1_vlg_sample_tst tb_sample (
	.A(A),
	.Ain(Ain),
	.B(B),
	.in_1(in_1),
	.in_2(in_2),
	.sampler_tx(sampler)
);

g21_lab1_vlg_check_tst tb_out(
	.AeqB(AeqB),
	.Amod13(Amod13),
	.Cout(Cout),
	.floor(floor),
	.out(out),
	.sampler_rx(sampler)
);
endmodule

