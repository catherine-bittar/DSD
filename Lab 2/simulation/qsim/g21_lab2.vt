// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/22/2017 21:15:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g21_lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g21_lab2_vlg_sample_tst(
	clk,
	code,
	mode,
	N,
	seed,
	sampler_tx
);
input  clk;
input [3:0] code;
input  mode;
input [5:0] N;
input [31:0] seed;
output sampler_tx;

reg sample;
time current_time;
always @(clk or code or mode or N or seed)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g21_lab2_vlg_check_tst (
	P_EN,
	rand,
	segments_out,
	sampler_rx
);
input [51:0] P_EN;
input [31:0] rand;
input [6:0] segments_out;
input sampler_rx;

reg [51:0] P_EN_expected;
reg [31:0] rand_expected;
reg [6:0] segments_out_expected;

reg [51:0] P_EN_prev;
reg [31:0] rand_prev;
reg [6:0] segments_out_prev;

reg [51:0] P_EN_expected_prev;

reg [51:0] last_P_EN_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	P_EN_prev = P_EN;
	rand_prev = rand;
	segments_out_prev = segments_out;
end

// update expected /o prevs

always @(trigger)
begin
	P_EN_expected_prev = P_EN_expected;
end


// expected P_EN[ 51 ]
initial
begin
	P_EN_expected[51] = 1'bX;
	P_EN_expected[51] = #999000 1'b0;
end 
// expected P_EN[ 50 ]
initial
begin
	P_EN_expected[50] = 1'bX;
	P_EN_expected[50] = #999000 1'b0;
end 
// expected P_EN[ 49 ]
initial
begin
	P_EN_expected[49] = 1'bX;
	P_EN_expected[49] = #999000 1'b0;
end 
// expected P_EN[ 48 ]
initial
begin
	P_EN_expected[48] = 1'bX;
	P_EN_expected[48] = #999000 1'b0;
end 
// expected P_EN[ 47 ]
initial
begin
	P_EN_expected[47] = 1'bX;
	P_EN_expected[47] = #999000 1'b0;
end 
// expected P_EN[ 46 ]
initial
begin
	P_EN_expected[46] = 1'bX;
	P_EN_expected[46] = #999000 1'b0;
end 
// expected P_EN[ 45 ]
initial
begin
	P_EN_expected[45] = 1'bX;
	P_EN_expected[45] = #999000 1'b0;
end 
// expected P_EN[ 44 ]
initial
begin
	P_EN_expected[44] = 1'bX;
	P_EN_expected[44] = #999000 1'b0;
end 
// expected P_EN[ 43 ]
initial
begin
	P_EN_expected[43] = 1'bX;
	P_EN_expected[43] = #999000 1'b0;
end 
// expected P_EN[ 42 ]
initial
begin
	P_EN_expected[42] = 1'bX;
	P_EN_expected[42] = #999000 1'b0;
end 
// expected P_EN[ 41 ]
initial
begin
	P_EN_expected[41] = 1'bX;
	P_EN_expected[41] = #999000 1'b0;
end 
// expected P_EN[ 40 ]
initial
begin
	P_EN_expected[40] = 1'bX;
	P_EN_expected[40] = #999000 1'b0;
end 
// expected P_EN[ 39 ]
initial
begin
	P_EN_expected[39] = 1'bX;
	P_EN_expected[39] = #999000 1'b0;
end 
// expected P_EN[ 38 ]
initial
begin
	P_EN_expected[38] = 1'bX;
	P_EN_expected[38] = #999000 1'b0;
end 
// expected P_EN[ 37 ]
initial
begin
	P_EN_expected[37] = 1'bX;
	P_EN_expected[37] = #999000 1'b0;
end 
// expected P_EN[ 36 ]
initial
begin
	P_EN_expected[36] = 1'bX;
	P_EN_expected[36] = #999000 1'b0;
end 
// expected P_EN[ 35 ]
initial
begin
	P_EN_expected[35] = 1'bX;
	P_EN_expected[35] = #999000 1'b0;
end 
// expected P_EN[ 34 ]
initial
begin
	P_EN_expected[34] = 1'bX;
	P_EN_expected[34] = #999000 1'b0;
end 
// expected P_EN[ 33 ]
initial
begin
	P_EN_expected[33] = 1'bX;
	P_EN_expected[33] = #999000 1'b0;
end 
// expected P_EN[ 32 ]
initial
begin
	P_EN_expected[32] = 1'bX;
	P_EN_expected[32] = #999000 1'b0;
end 
// expected P_EN[ 31 ]
initial
begin
	P_EN_expected[31] = 1'bX;
	P_EN_expected[31] = #999000 1'b0;
end 
// expected P_EN[ 30 ]
initial
begin
	P_EN_expected[30] = 1'bX;
	P_EN_expected[30] = #999000 1'b0;
end 
// expected P_EN[ 29 ]
initial
begin
	P_EN_expected[29] = 1'bX;
	P_EN_expected[29] = #999000 1'b0;
end 
// expected P_EN[ 28 ]
initial
begin
	P_EN_expected[28] = 1'bX;
	P_EN_expected[28] = #999000 1'b0;
end 
// expected P_EN[ 27 ]
initial
begin
	P_EN_expected[27] = 1'bX;
	P_EN_expected[27] = #999000 1'b0;
end 
// expected P_EN[ 26 ]
initial
begin
	P_EN_expected[26] = 1'bX;
	P_EN_expected[26] = #999000 1'b0;
end 
// expected P_EN[ 25 ]
initial
begin
	P_EN_expected[25] = 1'bX;
	P_EN_expected[25] = #999000 1'b0;
end 
// expected P_EN[ 24 ]
initial
begin
	P_EN_expected[24] = 1'bX;
	P_EN_expected[24] = #999000 1'b0;
end 
// expected P_EN[ 23 ]
initial
begin
	P_EN_expected[23] = 1'bX;
	P_EN_expected[23] = #999000 1'b0;
end 
// expected P_EN[ 22 ]
initial
begin
	P_EN_expected[22] = 1'bX;
	P_EN_expected[22] = #999000 1'b0;
end 
// expected P_EN[ 21 ]
initial
begin
	P_EN_expected[21] = 1'bX;
	P_EN_expected[21] = #999000 1'b0;
end 
// expected P_EN[ 20 ]
initial
begin
	P_EN_expected[20] = 1'bX;
	P_EN_expected[20] = #999000 1'b0;
end 
// expected P_EN[ 19 ]
initial
begin
	P_EN_expected[19] = 1'bX;
	P_EN_expected[19] = #999000 1'b0;
end 
// expected P_EN[ 18 ]
initial
begin
	P_EN_expected[18] = 1'bX;
	P_EN_expected[18] = #999000 1'b0;
end 
// expected P_EN[ 17 ]
initial
begin
	P_EN_expected[17] = 1'bX;
	P_EN_expected[17] = #999000 1'b0;
end 
// expected P_EN[ 16 ]
initial
begin
	P_EN_expected[16] = 1'bX;
	P_EN_expected[16] = #999000 1'b0;
end 
// expected P_EN[ 15 ]
initial
begin
	P_EN_expected[15] = 1'bX;
	P_EN_expected[15] = #999000 1'b0;
end 
// expected P_EN[ 14 ]
initial
begin
	P_EN_expected[14] = 1'bX;
	P_EN_expected[14] = #999000 1'b0;
end 
// expected P_EN[ 13 ]
initial
begin
	P_EN_expected[13] = 1'bX;
	P_EN_expected[13] = #999000 1'b0;
end 
// expected P_EN[ 12 ]
initial
begin
	P_EN_expected[12] = 1'bX;
	P_EN_expected[12] = #999000 1'b0;
end 
// expected P_EN[ 11 ]
initial
begin
	P_EN_expected[11] = 1'bX;
	P_EN_expected[11] = #999000 1'b0;
end 
// expected P_EN[ 10 ]
initial
begin
	P_EN_expected[10] = 1'bX;
	P_EN_expected[10] = #999000 1'b0;
end 
// expected P_EN[ 9 ]
initial
begin
	P_EN_expected[9] = 1'bX;
	P_EN_expected[9] = #999000 1'b0;
end 
// expected P_EN[ 8 ]
initial
begin
	P_EN_expected[8] = 1'bX;
	P_EN_expected[8] = #999000 1'b0;
end 
// expected P_EN[ 7 ]
initial
begin
	P_EN_expected[7] = 1'bX;
	P_EN_expected[7] = #999000 1'b0;
end 
// expected P_EN[ 6 ]
initial
begin
	P_EN_expected[6] = 1'bX;
	P_EN_expected[6] = #999000 1'b0;
end 
// expected P_EN[ 5 ]
initial
begin
	P_EN_expected[5] = 1'bX;
	P_EN_expected[5] = #999000 1'b0;
end 
// expected P_EN[ 4 ]
initial
begin
	P_EN_expected[4] = 1'bX;
	P_EN_expected[4] = #999000 1'b0;
end 
// expected P_EN[ 3 ]
initial
begin
	P_EN_expected[3] = 1'bX;
	P_EN_expected[3] = #999000 1'b0;
end 
// expected P_EN[ 2 ]
initial
begin
	P_EN_expected[2] = 1'bX;
	P_EN_expected[2] = #999000 1'b0;
end 
// expected P_EN[ 1 ]
initial
begin
	P_EN_expected[1] = 1'bX;
	P_EN_expected[1] = #999000 1'b0;
end 
// expected P_EN[ 0 ]
initial
begin
	P_EN_expected[0] = 1'bX;
	P_EN_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(P_EN_expected or P_EN or rand_expected or rand or segments_out_expected or segments_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected P_EN = %b | expected rand = %b | expected segments_out = %b | ",P_EN_expected_prev,rand_expected_prev,segments_out_expected_prev);
	$display("| real P_EN = %b | real rand = %b | real segments_out = %b | ",P_EN_prev,rand_prev,segments_out_prev);
`endif
	if (
		( P_EN_expected_prev[0] !== 1'bx ) && ( P_EN_prev[0] !== P_EN_expected_prev[0] )
		&& ((P_EN_expected_prev[0] !== last_P_EN_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[0] = P_EN_expected_prev[0];
	end
	if (
		( P_EN_expected_prev[1] !== 1'bx ) && ( P_EN_prev[1] !== P_EN_expected_prev[1] )
		&& ((P_EN_expected_prev[1] !== last_P_EN_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[1] = P_EN_expected_prev[1];
	end
	if (
		( P_EN_expected_prev[2] !== 1'bx ) && ( P_EN_prev[2] !== P_EN_expected_prev[2] )
		&& ((P_EN_expected_prev[2] !== last_P_EN_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[2] = P_EN_expected_prev[2];
	end
	if (
		( P_EN_expected_prev[3] !== 1'bx ) && ( P_EN_prev[3] !== P_EN_expected_prev[3] )
		&& ((P_EN_expected_prev[3] !== last_P_EN_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[3] = P_EN_expected_prev[3];
	end
	if (
		( P_EN_expected_prev[4] !== 1'bx ) && ( P_EN_prev[4] !== P_EN_expected_prev[4] )
		&& ((P_EN_expected_prev[4] !== last_P_EN_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[4] = P_EN_expected_prev[4];
	end
	if (
		( P_EN_expected_prev[5] !== 1'bx ) && ( P_EN_prev[5] !== P_EN_expected_prev[5] )
		&& ((P_EN_expected_prev[5] !== last_P_EN_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[5] = P_EN_expected_prev[5];
	end
	if (
		( P_EN_expected_prev[6] !== 1'bx ) && ( P_EN_prev[6] !== P_EN_expected_prev[6] )
		&& ((P_EN_expected_prev[6] !== last_P_EN_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[6] = P_EN_expected_prev[6];
	end
	if (
		( P_EN_expected_prev[7] !== 1'bx ) && ( P_EN_prev[7] !== P_EN_expected_prev[7] )
		&& ((P_EN_expected_prev[7] !== last_P_EN_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[7] = P_EN_expected_prev[7];
	end
	if (
		( P_EN_expected_prev[8] !== 1'bx ) && ( P_EN_prev[8] !== P_EN_expected_prev[8] )
		&& ((P_EN_expected_prev[8] !== last_P_EN_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[8] = P_EN_expected_prev[8];
	end
	if (
		( P_EN_expected_prev[9] !== 1'bx ) && ( P_EN_prev[9] !== P_EN_expected_prev[9] )
		&& ((P_EN_expected_prev[9] !== last_P_EN_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[9] = P_EN_expected_prev[9];
	end
	if (
		( P_EN_expected_prev[10] !== 1'bx ) && ( P_EN_prev[10] !== P_EN_expected_prev[10] )
		&& ((P_EN_expected_prev[10] !== last_P_EN_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[10] = P_EN_expected_prev[10];
	end
	if (
		( P_EN_expected_prev[11] !== 1'bx ) && ( P_EN_prev[11] !== P_EN_expected_prev[11] )
		&& ((P_EN_expected_prev[11] !== last_P_EN_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[11] = P_EN_expected_prev[11];
	end
	if (
		( P_EN_expected_prev[12] !== 1'bx ) && ( P_EN_prev[12] !== P_EN_expected_prev[12] )
		&& ((P_EN_expected_prev[12] !== last_P_EN_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[12] = P_EN_expected_prev[12];
	end
	if (
		( P_EN_expected_prev[13] !== 1'bx ) && ( P_EN_prev[13] !== P_EN_expected_prev[13] )
		&& ((P_EN_expected_prev[13] !== last_P_EN_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[13] = P_EN_expected_prev[13];
	end
	if (
		( P_EN_expected_prev[14] !== 1'bx ) && ( P_EN_prev[14] !== P_EN_expected_prev[14] )
		&& ((P_EN_expected_prev[14] !== last_P_EN_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[14] = P_EN_expected_prev[14];
	end
	if (
		( P_EN_expected_prev[15] !== 1'bx ) && ( P_EN_prev[15] !== P_EN_expected_prev[15] )
		&& ((P_EN_expected_prev[15] !== last_P_EN_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[15] = P_EN_expected_prev[15];
	end
	if (
		( P_EN_expected_prev[16] !== 1'bx ) && ( P_EN_prev[16] !== P_EN_expected_prev[16] )
		&& ((P_EN_expected_prev[16] !== last_P_EN_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[16] = P_EN_expected_prev[16];
	end
	if (
		( P_EN_expected_prev[17] !== 1'bx ) && ( P_EN_prev[17] !== P_EN_expected_prev[17] )
		&& ((P_EN_expected_prev[17] !== last_P_EN_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[17] = P_EN_expected_prev[17];
	end
	if (
		( P_EN_expected_prev[18] !== 1'bx ) && ( P_EN_prev[18] !== P_EN_expected_prev[18] )
		&& ((P_EN_expected_prev[18] !== last_P_EN_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[18] = P_EN_expected_prev[18];
	end
	if (
		( P_EN_expected_prev[19] !== 1'bx ) && ( P_EN_prev[19] !== P_EN_expected_prev[19] )
		&& ((P_EN_expected_prev[19] !== last_P_EN_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[19] = P_EN_expected_prev[19];
	end
	if (
		( P_EN_expected_prev[20] !== 1'bx ) && ( P_EN_prev[20] !== P_EN_expected_prev[20] )
		&& ((P_EN_expected_prev[20] !== last_P_EN_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[20] = P_EN_expected_prev[20];
	end
	if (
		( P_EN_expected_prev[21] !== 1'bx ) && ( P_EN_prev[21] !== P_EN_expected_prev[21] )
		&& ((P_EN_expected_prev[21] !== last_P_EN_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[21] = P_EN_expected_prev[21];
	end
	if (
		( P_EN_expected_prev[22] !== 1'bx ) && ( P_EN_prev[22] !== P_EN_expected_prev[22] )
		&& ((P_EN_expected_prev[22] !== last_P_EN_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[22] = P_EN_expected_prev[22];
	end
	if (
		( P_EN_expected_prev[23] !== 1'bx ) && ( P_EN_prev[23] !== P_EN_expected_prev[23] )
		&& ((P_EN_expected_prev[23] !== last_P_EN_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[23] = P_EN_expected_prev[23];
	end
	if (
		( P_EN_expected_prev[24] !== 1'bx ) && ( P_EN_prev[24] !== P_EN_expected_prev[24] )
		&& ((P_EN_expected_prev[24] !== last_P_EN_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[24] = P_EN_expected_prev[24];
	end
	if (
		( P_EN_expected_prev[25] !== 1'bx ) && ( P_EN_prev[25] !== P_EN_expected_prev[25] )
		&& ((P_EN_expected_prev[25] !== last_P_EN_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[25] = P_EN_expected_prev[25];
	end
	if (
		( P_EN_expected_prev[26] !== 1'bx ) && ( P_EN_prev[26] !== P_EN_expected_prev[26] )
		&& ((P_EN_expected_prev[26] !== last_P_EN_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[26] = P_EN_expected_prev[26];
	end
	if (
		( P_EN_expected_prev[27] !== 1'bx ) && ( P_EN_prev[27] !== P_EN_expected_prev[27] )
		&& ((P_EN_expected_prev[27] !== last_P_EN_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[27] = P_EN_expected_prev[27];
	end
	if (
		( P_EN_expected_prev[28] !== 1'bx ) && ( P_EN_prev[28] !== P_EN_expected_prev[28] )
		&& ((P_EN_expected_prev[28] !== last_P_EN_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[28] = P_EN_expected_prev[28];
	end
	if (
		( P_EN_expected_prev[29] !== 1'bx ) && ( P_EN_prev[29] !== P_EN_expected_prev[29] )
		&& ((P_EN_expected_prev[29] !== last_P_EN_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[29] = P_EN_expected_prev[29];
	end
	if (
		( P_EN_expected_prev[30] !== 1'bx ) && ( P_EN_prev[30] !== P_EN_expected_prev[30] )
		&& ((P_EN_expected_prev[30] !== last_P_EN_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[30] = P_EN_expected_prev[30];
	end
	if (
		( P_EN_expected_prev[31] !== 1'bx ) && ( P_EN_prev[31] !== P_EN_expected_prev[31] )
		&& ((P_EN_expected_prev[31] !== last_P_EN_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[31] = P_EN_expected_prev[31];
	end
	if (
		( P_EN_expected_prev[32] !== 1'bx ) && ( P_EN_prev[32] !== P_EN_expected_prev[32] )
		&& ((P_EN_expected_prev[32] !== last_P_EN_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[32] = P_EN_expected_prev[32];
	end
	if (
		( P_EN_expected_prev[33] !== 1'bx ) && ( P_EN_prev[33] !== P_EN_expected_prev[33] )
		&& ((P_EN_expected_prev[33] !== last_P_EN_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[33] = P_EN_expected_prev[33];
	end
	if (
		( P_EN_expected_prev[34] !== 1'bx ) && ( P_EN_prev[34] !== P_EN_expected_prev[34] )
		&& ((P_EN_expected_prev[34] !== last_P_EN_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[34] = P_EN_expected_prev[34];
	end
	if (
		( P_EN_expected_prev[35] !== 1'bx ) && ( P_EN_prev[35] !== P_EN_expected_prev[35] )
		&& ((P_EN_expected_prev[35] !== last_P_EN_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[35] = P_EN_expected_prev[35];
	end
	if (
		( P_EN_expected_prev[36] !== 1'bx ) && ( P_EN_prev[36] !== P_EN_expected_prev[36] )
		&& ((P_EN_expected_prev[36] !== last_P_EN_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[36] = P_EN_expected_prev[36];
	end
	if (
		( P_EN_expected_prev[37] !== 1'bx ) && ( P_EN_prev[37] !== P_EN_expected_prev[37] )
		&& ((P_EN_expected_prev[37] !== last_P_EN_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[37] = P_EN_expected_prev[37];
	end
	if (
		( P_EN_expected_prev[38] !== 1'bx ) && ( P_EN_prev[38] !== P_EN_expected_prev[38] )
		&& ((P_EN_expected_prev[38] !== last_P_EN_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[38] = P_EN_expected_prev[38];
	end
	if (
		( P_EN_expected_prev[39] !== 1'bx ) && ( P_EN_prev[39] !== P_EN_expected_prev[39] )
		&& ((P_EN_expected_prev[39] !== last_P_EN_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[39] = P_EN_expected_prev[39];
	end
	if (
		( P_EN_expected_prev[40] !== 1'bx ) && ( P_EN_prev[40] !== P_EN_expected_prev[40] )
		&& ((P_EN_expected_prev[40] !== last_P_EN_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[40] = P_EN_expected_prev[40];
	end
	if (
		( P_EN_expected_prev[41] !== 1'bx ) && ( P_EN_prev[41] !== P_EN_expected_prev[41] )
		&& ((P_EN_expected_prev[41] !== last_P_EN_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[41] = P_EN_expected_prev[41];
	end
	if (
		( P_EN_expected_prev[42] !== 1'bx ) && ( P_EN_prev[42] !== P_EN_expected_prev[42] )
		&& ((P_EN_expected_prev[42] !== last_P_EN_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[42] = P_EN_expected_prev[42];
	end
	if (
		( P_EN_expected_prev[43] !== 1'bx ) && ( P_EN_prev[43] !== P_EN_expected_prev[43] )
		&& ((P_EN_expected_prev[43] !== last_P_EN_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[43] = P_EN_expected_prev[43];
	end
	if (
		( P_EN_expected_prev[44] !== 1'bx ) && ( P_EN_prev[44] !== P_EN_expected_prev[44] )
		&& ((P_EN_expected_prev[44] !== last_P_EN_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[44] = P_EN_expected_prev[44];
	end
	if (
		( P_EN_expected_prev[45] !== 1'bx ) && ( P_EN_prev[45] !== P_EN_expected_prev[45] )
		&& ((P_EN_expected_prev[45] !== last_P_EN_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[45] = P_EN_expected_prev[45];
	end
	if (
		( P_EN_expected_prev[46] !== 1'bx ) && ( P_EN_prev[46] !== P_EN_expected_prev[46] )
		&& ((P_EN_expected_prev[46] !== last_P_EN_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[46] = P_EN_expected_prev[46];
	end
	if (
		( P_EN_expected_prev[47] !== 1'bx ) && ( P_EN_prev[47] !== P_EN_expected_prev[47] )
		&& ((P_EN_expected_prev[47] !== last_P_EN_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[47] = P_EN_expected_prev[47];
	end
	if (
		( P_EN_expected_prev[48] !== 1'bx ) && ( P_EN_prev[48] !== P_EN_expected_prev[48] )
		&& ((P_EN_expected_prev[48] !== last_P_EN_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[48] = P_EN_expected_prev[48];
	end
	if (
		( P_EN_expected_prev[49] !== 1'bx ) && ( P_EN_prev[49] !== P_EN_expected_prev[49] )
		&& ((P_EN_expected_prev[49] !== last_P_EN_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[49] = P_EN_expected_prev[49];
	end
	if (
		( P_EN_expected_prev[50] !== 1'bx ) && ( P_EN_prev[50] !== P_EN_expected_prev[50] )
		&& ((P_EN_expected_prev[50] !== last_P_EN_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[50] = P_EN_expected_prev[50];
	end
	if (
		( P_EN_expected_prev[51] !== 1'bx ) && ( P_EN_prev[51] !== P_EN_expected_prev[51] )
		&& ((P_EN_expected_prev[51] !== last_P_EN_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_EN[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_EN_expected_prev);
		$display ("     Real value = %b", P_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_EN_exp[51] = P_EN_expected_prev[51];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#64000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g21_lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] code;
reg mode;
reg [5:0] N;
reg [31:0] seed;
// wires                                               
wire [51:0] P_EN;
wire [31:0] rand;
wire [6:0] segments_out;

wire sampler;                             

// assign statements (if any)                          
g21_lab2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.code(code),
	.mode(mode),
	.N(N),
	.P_EN(P_EN),
	.\rand (rand),
	.seed(seed),
	.segments_out(segments_out)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// N[ 5 ]
always
begin
	N[5] = 1'b0;
	N[5] = #32000000 1'b1;
	#32000000;
end 
// N[ 4 ]
always
begin
	N[4] = 1'b0;
	N[4] = #16000000 1'b1;
	#16000000;
end 
// N[ 3 ]
always
begin
	N[3] = 1'b0;
	N[3] = #8000000 1'b1;
	#8000000;
end 
// N[ 2 ]
always
begin
	N[2] = 1'b0;
	N[2] = #4000000 1'b1;
	#4000000;
end 
// N[ 1 ]
always
begin
	N[1] = 1'b0;
	N[1] = #2000000 1'b1;
	#2000000;
end 
// N[ 0 ]
always
begin
	N[0] = 1'b0;
	N[0] = #1000000 1'b1;
	#1000000;
end 

g21_lab2_vlg_sample_tst tb_sample (
	.clk(clk),
	.code(code),
	.mode(mode),
	.N(N),
	.seed(seed),
	.sampler_tx(sampler)
);

g21_lab2_vlg_check_tst tb_out(
	.P_EN(P_EN),
	.rand(rand),
	.segments_out(segments_out),
	.sampler_rx(sampler)
);
endmodule

